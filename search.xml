<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Seata处理分布式事务</title>
      <link href="2021/06/02/seata-chu-li-fen-bu-shi-shi-wu/"/>
      <url>2021/06/02/seata-chu-li-fen-bu-shi-shi-wu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、分布式事务详解"><a href="#一、分布式事务详解" class="headerlink" title="一、分布式事务详解"></a>一、分布式事务详解</h3><h4 id="1、分布式架构演进之-数据库的水平拆分"><a href="#1、分布式架构演进之-数据库的水平拆分" class="headerlink" title="1、分布式架构演进之 - 数据库的水平拆分"></a>1、分布式架构演进之 - 数据库的水平拆分</h4><p><code>一个单体应用的业务数据库起初是单库单表，但随着业务数据规模的快速发展，数据量越来越大，单库单表逐渐成为瓶颈。所以我们对数据库进行了水平拆分，将原单库单表拆分成数据库分片。 </code></p><p>如下图所示，分库分表之后，原来在一个数据库上就能完成的写操作，可能就会跨多个数据库，这就产生了跨数据库事务问题。</p><p><img src="https://static01.imgkr.com/temp/edb7db3764264b818f6e0f085b439271.png"></p><h4 id="2、-分布式架构演进之-业务服务化拆分"><a href="#2、-分布式架构演进之-业务服务化拆分" class="headerlink" title="2、 分布式架构演进之 - 业务服务化拆分"></a>2、 分布式架构演进之 - 业务服务化拆分</h4><p><code>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据库，业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题没法保证。</code></p><p> <img src="https://static01.imgkr.com/temp/072bcec432b24d0f8fab595a5865b064.png"></p><p><code>业务系统按照服务拆分之后，一个完整的业务往往需要调用多个服务，如何保证多个服务间的数据一致性成为一个难题。 </code></p><h3 id="二、Seata简介"><a href="#二、Seata简介" class="headerlink" title="二、Seata简介"></a>二、Seata简介</h3><blockquote><p> 官网：<a href="http://seata.io/zh-cn">http://seata.io/zh-cn</a></p></blockquote><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p><code>Seata 是一款阿里巴巴开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。 </code></p><h4 id="特色功能："><a href="#特色功能：" class="headerlink" title="特色功能："></a>特色功能：</h4><ul><li>微服务架构支持：已支持 Dubbo、Spring Cloud、Sofa-RPC、Motan 和 grpc 等RPC框架，其他框架持续集成中 </li><li>AT模式：提供无侵入自动补偿的事务模式，目前已支持 MySQL、 Oracle 、PostgreSQL和 TiDB的AT模式。</li><li>TCC模式：不依赖于底层数据资源的事务支持，支持把 <strong>自定义</strong> 的分支事务纳入到全局事务的管理中。 支持 TCC 模式并可与 AT 混用，灵活度更高 </li><li>SAGA 模式：为长事务提供有效的解决方案。适用：业务流程长、业务流程多的场景</li></ul><h4 id="Seate是如何实现分布式事务？"><a href="#Seate是如何实现分布式事务？" class="headerlink" title="Seate是如何实现分布式事务？"></a>Seate是如何实现分布式事务？</h4><p><strong>分布式事务</strong>是由一批<strong>分支事务</strong>组成的<strong>全局</strong>事务<strong>，通常</strong>分支事务只是<strong>本地事务</strong>。 </p><p><img src="https://camo.githubusercontent.com/6b399eaabbd0de4f5b89468ab00d0b4eac4305d46c59584a4743e7b08b2e008f/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031353435343937392d61313865313666362d656434312d343466312d396337612d6264383263346435666639392e706e67"></p><p><code>一个分布式事务过程由一个全局唯一的事务ID+三组件模型共同完成</code></p><p><strong>三组件模型：</strong></p><ul><li>TC (Transaction Coordinator) - <strong>事务协调者</strong>：维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>TM (Transaction Manager) - <strong>事务管理器</strong>：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>RM (Resource Manager) - <strong>资源管理器</strong>：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p><img src="https://camo.githubusercontent.com/7ed522a514df2153b546a50af97b155d2163e30df937a69e5cb4cf04210d74eb/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363931373838312d32366661626562392d373166612d346633652d386137612d6663333137643333383966342e706e67"></p><p><strong>图解：</strong></p><ol><li>TM 向 TC 申请开启一个<strong>全局事务</strong>，全局事务创建成功并生成一个<strong>全局唯一的 XID</strong>；</li><li>XID 在微服务<strong>调用链路</strong>的上下文中传播；</li><li>RM 向 TC 注册<strong>分支事务</strong>，将其纳入 XID 对应<strong>全局事务</strong>的管辖；</li><li>TM 请求 TC <strong>提交</strong>或<strong>回滚</strong> XID 对应的全局事务。</li><li>TC 调度 XID 下管辖的<strong>全部分支事务</strong>完成<strong>提交</strong>或<strong>回滚</strong>请求。</li></ol><h3 id="三、Seata安装与服务端配置"><a href="#三、Seata安装与服务端配置" class="headerlink" title="三、Seata安装与服务端配置"></a>三、Seata安装与服务端配置</h3><blockquote><p>下载：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><p>Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。 </p></blockquote><p>下载成功就可以了，绿色版免安装。这里下载的版本为<code>seata 1.4.zip</code>，解压后的目录：</p><p><img src="https://static01.imgkr.com/temp/0a79e31be1c2415197264f539730bcf0.png"></p><h4 id="集成Nacos配置"><a href="#集成Nacos配置" class="headerlink" title="集成Nacos配置"></a>集成Nacos配置</h4><p>接下来配置环境，由于我这边<code>服务注册中心</code>使用的<code>nacos</code>，修改两个配置文件<code>conf/file.conf</code>、<code>conf/regirsty.conf</code></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">## seata/conf/file.conf 文件</span><span class="token comment">## 事务日志存储，仅用于seata服务器</span>store <span class="token punctuation">&#123;</span>  <span class="token comment">## store mode: file、db、redis</span>  <span class="token comment">## Server端存储模式（store.mode）现有file、db、redis三种;</span>  <span class="token comment">## db模式为高可用模式，全局事务会话信息通过db共享，相应性能差些;</span>  <span class="token comment">##redis模式Seata-Server 1.3及以上版本支持,性能较高,存在事务信息丢失风险,请提前配置合适当前场景的redis持久化配置;</span>  mode <span class="token operator">=</span> <span class="token string">"db"</span> <span class="token comment"># 修改为数据库持久化</span>  <span class="token comment">## 文件存储属性</span>  file <span class="token punctuation">&#123;</span>    <span class="token comment">## store location dir</span>    dir <span class="token operator">=</span> <span class="token string">"sessionStore"</span>    <span class="token comment"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span>    maxBranchSessionSize <span class="token operator">=</span> <span class="token number">16384</span>    <span class="token comment"># globe session size , if exceeded throws exceptions</span>    maxGlobalSessionSize <span class="token operator">=</span> <span class="token number">512</span>    <span class="token comment"># file buffer size , if exceeded allocate new buffer</span>    fileWriteBufferCacheSize <span class="token operator">=</span> <span class="token number">16384</span>    <span class="token comment"># when recover batch read size</span>    sessionReloadReadSize <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment"># async, sync</span>    flushDiskMode <span class="token operator">=</span> async  <span class="token punctuation">&#125;</span>  <span class="token comment">## 数据库存储属性</span>  db <span class="token punctuation">&#123;</span>    <span class="token comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span>    datasource <span class="token operator">=</span> <span class="token string">"druid"</span>    <span class="token comment">## mysql/oracle/postgresql/h2/oceanbase etc.</span>    dbType <span class="token operator">=</span> <span class="token string">"mysql"</span>    driverClassName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span>    url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/seata"</span>    <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">"root"</span>    password <span class="token operator">=</span> <span class="token string">"123456"</span>    minConn <span class="token operator">=</span> <span class="token number">5</span>    maxConn <span class="token operator">=</span> <span class="token number">100</span>    globalTable <span class="token operator">=</span> <span class="token string">"global_table"</span>    branchTable <span class="token operator">=</span> <span class="token string">"branch_table"</span>    lockTable <span class="token operator">=</span> <span class="token string">"lock_table"</span>    queryLimit <span class="token operator">=</span> <span class="token number">100</span>    maxWait <span class="token operator">=</span> <span class="token number">5000</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">## redis存储属性</span>  redis <span class="token punctuation">&#123;</span>    host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>    port <span class="token operator">=</span> <span class="token string">"6379"</span>    password <span class="token operator">=</span> <span class="token string">""</span>    database <span class="token operator">=</span> <span class="token string">"0"</span>    minConn <span class="token operator">=</span> <span class="token number">1</span>    maxConn <span class="token operator">=</span> <span class="token number">10</span>    maxTotal <span class="token operator">=</span> <span class="token number">100</span>    queryLimit <span class="token operator">=</span> <span class="token number">100</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">## conf/regirsty.conf 文件</span>registry <span class="token punctuation">&#123;</span>  <span class="token comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span>  type <span class="token operator">=</span> <span class="token string">"nacos"</span> <span class="token comment"># 修改为你使用的存储方式</span>  loadBalance <span class="token operator">=</span> <span class="token string">"RandomLoadBalance"</span>  loadBalanceVirtualNodes <span class="token operator">=</span> <span class="token number">10</span>  nacos <span class="token punctuation">&#123;</span>    application <span class="token operator">=</span> <span class="token string">"seata-server"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8848"</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>    namespace <span class="token operator">=</span> <span class="token string">""</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    username <span class="token operator">=</span> <span class="token string">""</span>    password <span class="token operator">=</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span>  eureka <span class="token punctuation">&#123;</span>    serviceUrl <span class="token operator">=</span> <span class="token string">"http://localhost:8761/eureka"</span>    application <span class="token operator">=</span> <span class="token string">"default"</span>    weight <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">&#125;</span>  redis <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"localhost:6379"</span>    db <span class="token operator">=</span> <span class="token number">0</span>    password <span class="token operator">=</span> <span class="token string">""</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    <span class="token keyword">timeout</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  zk <span class="token punctuation">&#123;</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span>    sessionTimeout <span class="token operator">=</span> <span class="token number">6000</span>    connectTimeout <span class="token operator">=</span> <span class="token number">2000</span>    username <span class="token operator">=</span> <span class="token string">""</span>    password <span class="token operator">=</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span>  consul <span class="token punctuation">&#123;</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8500"</span>  <span class="token punctuation">&#125;</span>  etcd3 <span class="token punctuation">&#123;</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"http://localhost:2379"</span>  <span class="token punctuation">&#125;</span>  sofa <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:9603"</span>    application <span class="token operator">=</span> <span class="token string">"default"</span>    region <span class="token operator">=</span> <span class="token string">"DEFAULT_ZONE"</span>    datacenter <span class="token operator">=</span> <span class="token string">"DefaultDataCenter"</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>    addressWaitTime <span class="token operator">=</span> <span class="token string">"3000"</span>  <span class="token punctuation">&#125;</span>  file <span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>config <span class="token punctuation">&#123;</span>  <span class="token comment"># file、nacos 、apollo、zk、consul、etcd3</span>  type <span class="token operator">=</span> <span class="token string">"nacos"</span> <span class="token comment"># 和上面一样</span>  nacos <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8848"</span>    namespace <span class="token operator">=</span> <span class="token string">""</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>    username <span class="token operator">=</span> <span class="token string">""</span>    password <span class="token operator">=</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span>  consul <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8500"</span>  <span class="token punctuation">&#125;</span>  apollo <span class="token punctuation">&#123;</span>    appId <span class="token operator">=</span> <span class="token string">"seata-server"</span>    apolloMeta <span class="token operator">=</span> <span class="token string">"http://192.168.1.204:8801"</span>    namespace <span class="token operator">=</span> <span class="token string">"application"</span>    apolloAccesskeySecret <span class="token operator">=</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span>  zk <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span>    sessionTimeout <span class="token operator">=</span> <span class="token number">6000</span>    connectTimeout <span class="token operator">=</span> <span class="token number">2000</span>    username <span class="token operator">=</span> <span class="token string">""</span>    password <span class="token operator">=</span> <span class="token string">""</span>  <span class="token punctuation">&#125;</span>  etcd3 <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"http://localhost:2379"</span>  <span class="token punctuation">&#125;</span>  file <span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库配置-Seata所需"><a href="#数据库配置-Seata所需" class="headerlink" title="数据库配置-Seata所需"></a>数据库配置-Seata所需</h4><p>版本为<code>Seata 1.4</code>，sql文件的下载目录在<code>/seata/conf/REDEME.md</code>中。</p><blockquote><p> 链接：<a href="https://github.com/seata/seata/tree/1.4.0/script">https://github.com/seata/seata/tree/1.4.0/script</a></p></blockquote><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">环境必要配置，不配用不了！！！全局事务会话信息由3块内容构成，全局事务--&gt;分支事务--&gt;全局锁，对应表global_table、branch_table、lock_table server端数据库脚本 (包含 lock_table、branch_table 与 global_table) 及各个容器配置在上面链接中&#x2F;script&#x2F;server目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h4><p>先启动<code>Nacos</code>，再启动<code>Seata</code>。两个控制台都没报错即可</p><h3 id="四、Seata-Client-配置"><a href="#四、Seata-Client-配置" class="headerlink" title="四、Seata Client 配置"></a>四、Seata Client 配置</h3><h4 id="业务系统集成说明（AT模式）"><a href="#业务系统集成说明（AT模式）" class="headerlink" title="业务系统集成说明（AT模式）"></a>业务系统集成说明（AT模式）</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">这里会创建三个服务，一个订单服务，一个库存服务，一个账户服务。为了减少文章篇幅，这里只写订单服务，库存和账户除了业务相关，其他的配置相同 当用户下单时，会在订单服务中创建一个订单，然后通过远程调用库存服务来扣减下单商品的库存，再通过远程调用账户服务来扣减用户账户里面的余额，最后在订单服务中修改订单状态为已完成。 该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库配置-Seata所需-1"><a href="#数据库配置-Seata所需-1" class="headerlink" title="数据库配置-Seata所需"></a>数据库配置-Seata所需</h4><blockquote><p>链接：<a href="https://github.com/seata/seata/tree/1.4.0/script/client/at/db/mysql.sql">https://github.com/seata/seata/tree/1.4.0/script/client/at/db/mysql.sql</a></p></blockquote><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">环境必要配置！！！对于AT模式，必须为业务数据库初始化此sql。seata服务器不需要它。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h4><ol><li>pom.xml</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--nacos--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--seata--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--移除自带的版本--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--feign--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>application.yml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span>        <span class="token comment">#自定义事务组名称需要与seata-server中的对应</span>        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service<span class="token punctuation">-</span>group    <span class="token key atrule">nacos</span><span class="token punctuation">:</span> <span class="token comment">#这里配置要与Seata服务端 `seata/conf/file.conf`文件内的nocas配置保持一致</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP <span class="token comment">#不配会报no available service found in cluster 'xxx'错</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/seata_order    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">io</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span> info<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>file.conf</li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 下载链接：https://github.com/seata/seata/tree/1.4.0/script/client/conf/file.conf</span>transport <span class="token punctuation">&#123;</span>  <span class="token comment"># tcp udt unix-domain-socket</span>  type <span class="token operator">=</span> <span class="token string">"TCP"</span>  <span class="token comment">#NIO NATIVE</span>  <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token string">"NIO"</span>  <span class="token comment">#enable heartbeat</span>  heartbeat <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment"># the client batch send request enable</span>  enableClientBatchSendRequest <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment">#thread factory for netty</span>  threadFactory <span class="token punctuation">&#123;</span>    bossThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyBoss"</span>    workerThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyServerNIOWorker"</span>    serverExecutorThread<span class="token operator">-</span>prefix <span class="token operator">=</span> <span class="token string">"NettyServerBizHandler"</span>    shareBossWorker <span class="token operator">=</span> <span class="token boolean">false</span>    clientSelectorThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyClientSelector"</span>    clientSelectorThreadSize <span class="token operator">=</span> <span class="token number">1</span>    clientWorkerThreadPrefix <span class="token operator">=</span> <span class="token string">"NettyClientWorkerThread"</span>    <span class="token comment"># netty boss thread size,will not be used for UDT</span>    bossThreadSize <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">#auto default pin or 8</span>    workerThreadSize <span class="token operator">=</span> <span class="token string">"default"</span>  <span class="token punctuation">&#125;</span>  shutdown <span class="token punctuation">&#123;</span>    <span class="token comment"># when destroy server, wait seconds</span>    wait <span class="token operator">=</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span>  serialization <span class="token operator">=</span> <span class="token string">"seata"</span>  compressor <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">&#125;</span>service <span class="token punctuation">&#123;</span>  <span class="token comment">#transaction service group mapping</span>  <span class="token comment">#这里一定要和上面yml里面配置一致，不然会报错！！！</span>  vgroupMapping<span class="token punctuation">.</span>seata<span class="token operator">-</span>order<span class="token operator">-</span>service<span class="token operator">-</span>group <span class="token operator">=</span> <span class="token string">"default"</span>  <span class="token comment">#only support when registry.type=file, please don't set multiple addresses</span>  default<span class="token punctuation">.</span>grouplist <span class="token operator">=</span> <span class="token string">"127.0.0.1:8091"</span>  <span class="token comment">#degrade, current not support</span>  enableDegrade <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">#disable seata</span>  disableGlobalTransaction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>client <span class="token punctuation">&#123;</span>  rm <span class="token punctuation">&#123;</span>    asyncCommitBufferLimit <span class="token operator">=</span> <span class="token number">10000</span>    lock <span class="token punctuation">&#123;</span>      retryInterval <span class="token operator">=</span> <span class="token number">10</span>      retryTimes <span class="token operator">=</span> <span class="token number">30</span>      retryPolicyBranchRollbackOnConflict <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    reportRetryCount <span class="token operator">=</span> <span class="token number">5</span>    tableMetaCheckEnable <span class="token operator">=</span> <span class="token boolean">false</span>    reportSuccessEnable <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  tm <span class="token punctuation">&#123;</span>    commitRetryCount <span class="token operator">=</span> <span class="token number">5</span>    rollbackRetryCount <span class="token operator">=</span> <span class="token number">5</span>  <span class="token punctuation">&#125;</span>  undo <span class="token punctuation">&#123;</span>    dataValidation <span class="token operator">=</span> <span class="token boolean">true</span>    logSerialization <span class="token operator">=</span> <span class="token string">"jackson"</span>    logTable <span class="token operator">=</span> <span class="token string">"undo_log"</span>  <span class="token punctuation">&#125;</span>  log <span class="token punctuation">&#123;</span>    exceptionRate <span class="token operator">=</span> <span class="token number">100</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>registry.conf</li></ol><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 下载链接：https://github.com/seata/seata/tree/1.4.0/script/client/conf/registry.conf</span>registry <span class="token punctuation">&#123;</span>  <span class="token comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span>  type <span class="token operator">=</span> <span class="token string">"nacos"</span>  nacos <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"localhost:8848"</span>    namespace <span class="token operator">=</span> <span class="token string">"public"</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span> <span class="token comment"># 一定要与yaml配置一致！</span>    username <span class="token operator">=</span> <span class="token string">"nacos"</span>    password <span class="token operator">=</span> <span class="token string">"nacos"</span>  <span class="token punctuation">&#125;</span>  eureka <span class="token punctuation">&#123;</span>    serviceUrl <span class="token operator">=</span> <span class="token string">"http://172.16.1.187:21001/eureka"</span>    application <span class="token operator">=</span> <span class="token string">"default"</span>    weight <span class="token operator">=</span> <span class="token string">"1"</span>  <span class="token punctuation">&#125;</span>  redis <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"localhost:6379"</span>    db <span class="token operator">=</span> <span class="token string">"0"</span>  <span class="token punctuation">&#125;</span>  zk <span class="token punctuation">&#123;</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span>    session<span class="token punctuation">.</span><span class="token keyword">timeout</span> <span class="token operator">=</span> <span class="token number">6000</span>    connect<span class="token punctuation">.</span><span class="token keyword">timeout</span> <span class="token operator">=</span> <span class="token number">2000</span>  <span class="token punctuation">&#125;</span>  consul <span class="token punctuation">&#123;</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8500"</span>  <span class="token punctuation">&#125;</span>  etcd3 <span class="token punctuation">&#123;</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    serverAddr <span class="token operator">=</span> <span class="token string">"http://localhost:2379"</span>  <span class="token punctuation">&#125;</span>  sofa <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:9603"</span>    application <span class="token operator">=</span> <span class="token string">"default"</span>    region <span class="token operator">=</span> <span class="token string">"DEFAULT_ZONE"</span>    datacenter <span class="token operator">=</span> <span class="token string">"DefaultDataCenter"</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span>    addressWaitTime <span class="token operator">=</span> <span class="token string">"3000"</span>  <span class="token punctuation">&#125;</span>  file <span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>config <span class="token punctuation">&#123;</span>  <span class="token comment"># file、nacos 、apollo、zk、consul、etcd3</span>  type <span class="token operator">=</span> <span class="token string">"file"</span>  nacos <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"localhost:8848"</span>    namespace <span class="token operator">=</span> <span class="token string">"public"</span>    cluster <span class="token operator">=</span> <span class="token string">"default"</span>    group <span class="token operator">=</span> <span class="token string">"SEATA_GROUP"</span> <span class="token comment"># 这里也是</span>    username <span class="token operator">=</span> <span class="token string">"nacos"</span>    password <span class="token operator">=</span> <span class="token string">"nacos"</span>  <span class="token punctuation">&#125;</span>  consul <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:8500"</span>  <span class="token punctuation">&#125;</span>  apollo <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"seata-server"</span>    apollo<span class="token punctuation">.</span>meta <span class="token operator">=</span> <span class="token string">"http://192.168.1.204:8801"</span>  <span class="token punctuation">&#125;</span>  zk <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span>    session<span class="token punctuation">.</span><span class="token keyword">timeout</span> <span class="token operator">=</span> <span class="token number">6000</span>    connect<span class="token punctuation">.</span><span class="token keyword">timeout</span> <span class="token operator">=</span> <span class="token number">2000</span>  <span class="token punctuation">&#125;</span>  etcd3 <span class="token punctuation">&#123;</span>    serverAddr <span class="token operator">=</span> <span class="token string">"http://localhost:2379"</span>  <span class="token punctuation">&#125;</span>  file <span class="token punctuation">&#123;</span>    name <span class="token operator">=</span> <span class="token string">"file.conf"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>主启动</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment">//因为要使用Seata提供的代理数据源，所以在启动类移除SpringBoot自动默认装配的数据源</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataOrderMainApp2001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SeataOrderMainApp2001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>使用Seata对数据源进行代理</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;mybatis.mapperLocations&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setTransactionFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重点注意</strong>：</p><p><img src="https://static01.imgkr.com/temp/bd58399ed9cd4f8ab57993eb117d3383.png"></p><h4 id="集成结束"><a href="#集成结束" class="headerlink" title="集成结束"></a>集成结束</h4><p><code>将三个服务，以及seata集成到nocas中，看到下图且控制台没有报错即成功</code></p><p><img src="https://static01.imgkr.com/temp/b71b95bc3e864235b2bff87d9c1e913e.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>为了测试用户下单，形成完成链路调用，业务方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建订单->调用库存服务扣减库存->调用账户服务扣减账户余额->修改订单状态     * 简单说：下订单->扣库存->减余额->改状态     */</span>    <span class="token annotation punctuation">@Override</span><span class="token comment">//    @GlobalTransactional(name = "tx-create-order",rollbackFor = Exception.class)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->开始新建订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1 新建订单</span>        orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2 扣减库存</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用库存，做扣减Count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        storageService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用库存，做扣减end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3 扣减账户</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用账户，做扣减Money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->订单微服务开始调用账户，做扣减end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4 修改订单状态，从零到1,1代表已经完成</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->修改订单状态开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->修改订单状态结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"----->下订单结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里测试调用扣减账户余额的逻辑超时异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">AccountDao</span> accountDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 扣减账户余额     */</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->account-service中扣减账户余额开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//模拟超时异常，全局事务回滚 @FeignClient的默认超时时间为1S</span>        <span class="token comment">//暂停几秒钟线程</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountDao<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->account-service中扣减账户余额结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入地址：<code>http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">53.935</span>  INFO <span class="token number">10572</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">2001</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>a<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>OrderServiceImpl</span>    <span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-></span>开始新建订单<span class="token number">2021</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">53.939</span>  INFO <span class="token number">10572</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">2001</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>a<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>OrderServiceImpl</span>    <span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-></span>订单微服务开始调用库存，做扣减<span class="token class-name">Count</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">53.949</span>  INFO <span class="token number">10572</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">2001</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>a<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>OrderServiceImpl</span>    <span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-></span>订单微服务开始调用库存，做扣减end<span class="token number">2021</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">53.949</span>  INFO <span class="token number">10572</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">2001</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>a<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>OrderServiceImpl</span>    <span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-></span>订单微服务开始调用账户，做扣减<span class="token class-name">Money</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">54.953</span> ERROR <span class="token number">10572</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">2001</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span></span>C</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">/</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span>    <span class="token operator">:</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> servlet <span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span> in context <span class="token keyword">with</span> <span class="token namespace">path</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> threw exception <span class="token punctuation">[</span><span class="token class-name">Request</span> processing failed<span class="token punctuation">;</span> nested exception is <span class="token class-name"><span class="token namespace">feign<span class="token punctuation">.</span></span>RetryableException</span><span class="token operator">:</span> <span class="token class-name">Read</span> timed out executing POST http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>seata<span class="token operator">-</span>account<span class="token operator">-</span>service<span class="token operator">/</span>account<span class="token operator">/</span>decrease<span class="token operator">?</span>userId<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>money<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token keyword">with</span> <span class="token namespace">root</span> cause<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketTimeoutException</span><span class="token operator">:</span> <span class="token class-name">Read</span> timed outat <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketInputStream</span><span class="token punctuation">.</span><span class="token function">socketRead0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span><span class="token number">1.8</span><span class="token number">.0_211</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会发现订单虽然已经生成，但是状态却不是成功。用户账户余额也没有扣减成功。</p><p>接下来，打开<code>OrderServiceImpl</code>中的<code>GlobalTransactional</code>。再次测试发现依然报错，但是数据库的数据中：订单表没有新增订单，账户无变化，库存无变化。代表事务回滚成功。</p><h3 id="五、AT模式"><a href="#五、AT模式" class="headerlink" title="五、AT模式"></a>五、AT模式</h3><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ul><li>基于支持本地 ACID 事务的关系型数据库。</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><h4 id="整体机制"><a href="#整体机制" class="headerlink" title="整体机制"></a>整体机制</h4><p>两阶段提交协议的演变：</p><ul><li><p>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</p></li><li><p>二阶段：</p><ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><p>  以一个示例来说明整个 AT 分支的工作过程。 </p><p>业务表：<code>user</code></p><table><thead><tr><th>列名</th><th>类型</th><th>键</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td><strong>主键（primary key）</strong></td></tr><tr><td>name</td><td>varchar(100)</td><td></td></tr><tr><td>age</td><td>varchar(100)</td><td></td></tr></tbody></table><p>AT 分支事务的业务逻辑： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'wang'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'zhang'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h5><p>过程：</p><ol><li>解析 SQL：得到 SQL 的类型（UPDATE），表（user），条件（where name = ‘zhang’）等相关的信息。</li><li>查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'zhang'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到前镜像：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>zhang</td><td>20</td></tr></tbody></table><ol start="3"><li>执行业务 SQL：更新这条记录的 name 为 ‘wang’。</li><li>查询后镜像：根据前镜像的结果，通过 <strong>主键</strong> 定位数据。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'wang'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到后镜像：<br>| id   | name | since |<br>| —- | —- | —– |<br>| 1    | wang | 20    |</p><ol start="5"><li>插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 <code>UNDO_LOG</code> 表中。</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.undo.BranchUndoLog"</span><span class="token punctuation">,</span><span class="token property">"xid"</span><span class="token operator">:</span> <span class="token string">"172.18.88.16:8091:145134433740062720"</span><span class="token punctuation">,</span><span class="token property">"branchId"</span><span class="token operator">:</span> <span class="token number">145134435245817856</span><span class="token punctuation">,</span><span class="token property">"sqlUndoLogs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.undo.SQLUndoLog"</span><span class="token punctuation">,</span><span class="token property">"sqlType"</span><span class="token operator">:</span> <span class="token string">"UPDATE"</span><span class="token punctuation">,</span><span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span><span class="token property">"beforeImage"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.TableRecords"</span><span class="token punctuation">,</span><span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span><span class="token property">"rows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Row"</span><span class="token punctuation">,</span><span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Field"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span><span class="token property">"keyType"</span><span class="token operator">:</span> <span class="token string">"PRIMARY_KEY"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">-5</span><span class="token punctuation">,</span><span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.lang.Long"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Field"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span><span class="token property">"keyType"</span><span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"String"</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Field"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span><span class="token property">"keyType"</span><span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.math.BigDecimal"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"afterImage"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.TableRecords"</span><span class="token punctuation">,</span><span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span><span class="token property">"rows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Row"</span><span class="token punctuation">,</span><span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Field"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span><span class="token property">"keyType"</span><span class="token operator">:</span> <span class="token string">"PRIMARY_KEY"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">-5</span><span class="token punctuation">,</span><span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.lang.Long"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Field"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span><span class="token property">"keyType"</span><span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"String"</span><span class="token punctuation">,</span> <span class="token string">"王"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"io.seata.rm.datasource.sql.struct.Field"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span><span class="token property">"keyType"</span><span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token property">"value"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java.math.BigDecimal"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>提交前，向 TC 注册分支：申请 <code>product</code> 表中，主键值等于 1 的记录的 <strong>全局锁</strong> 。</li><li>本地事务提交：业务数据的更新和前面步骤中生成的 UNDO LOG 一并提交。</li><li>将本地事务提交的结果上报给 TC。</li></ol><h5 id="二阶段-提交"><a href="#二阶段-提交" class="headerlink" title="二阶段-提交"></a>二阶段-提交</h5><p>​    1. 收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。</p><ol start="2"><li>异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li></ol><h5 id="二阶段-回滚"><a href="#二阶段-回滚" class="headerlink" title="二阶段-回滚"></a>二阶段-回滚</h5><ol><li>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</li><li>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</li><li>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍。</li><li>根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</li></ol><pre class="line-numbers language-none"><code class="language-none">update user set name &#x3D; &#39;zhang&#39; where id &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</li></ol><h4 id="附：回滚日志表（undo-log）"><a href="#附：回滚日志表（undo-log）" class="headerlink" title="附：回滚日志表（undo_log）"></a>附：回滚日志表（undo_log）</h4><p>这里是MySQL下的</p><table><thead><tr><th>Field</th><th>Type</th></tr></thead><tbody><tr><td>branch_id（事务分支ID）</td><td>bigint PK</td></tr><tr><td>xid （事务ID）</td><td>varchar(100)</td></tr><tr><td>context（表上下文，如序列化）</td><td>varchar(128)</td></tr><tr><td>rollback_info （ 回滚日志记录，包含前后置镜像等）</td><td>longblob</td></tr><tr><td>log_status （0：正常状态，1：回滚状态）</td><td>tinyint</td></tr><tr><td>log_created （创建时间）</td><td>datetime</td></tr><tr><td>log_modified （修改时间）</td><td>datetime</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SpringCloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用matery主题</title>
      <link href="2021/05/30/hexo-shi-yong-matery-zhu-ti/"/>
      <url>2021/05/30/hexo-shi-yong-matery-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><blockquote><p>官网：<a href="https://github.com/willivie/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/willivie/hexo-theme-matery/blob/develop/README_CN.md</a></p></blockquote><h5 id="Matery是一个采用-Material-Design-和响应式设计的-Hexo-博客主题。"><a href="#Matery是一个采用-Material-Design-和响应式设计的-Hexo-博客主题。" class="headerlink" title="Matery是一个采用 Material Design 和响应式设计的 Hexo 博客主题。"></a>Matery是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</h5><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网推荐使用hexo5.0及以上的版本，下载步骤直接克隆项目文件到你的hexo博客的theme目录下即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="1、代码高亮"><a href="#1、代码高亮" class="headerlink" title="1、代码高亮"></a>1、代码高亮</h3><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下： </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。 </p><h3 id="2、搜索"><a href="#2、搜索" class="headerlink" title="2、搜索"></a>2、搜索</h3><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、中文链接转拼音"><a href="#3、中文链接转拼音" class="headerlink" title="3、中文链接转拼音"></a>3、中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4、文章统计次数"><a href="#4、文章统计次数" class="headerlink" title="4、文章统计次数"></a>4、文章统计次数</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、“关于”页面增加简历"><a href="#5、“关于”页面增加简历" class="headerlink" title="5、“关于”页面增加简历"></a>5、“关于”页面增加简历</h3><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>&lt;%- __('myCV') %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &lt;%- page.content %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列之RabbitMQ</title>
      <link href="2021/05/28/xiao-xi-zhong-jian-jian-zhi-rabbitmq/"/>
      <url>2021/05/28/xiao-xi-zhong-jian-jian-zhi-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="什么是MQ？"><a href="#什么是MQ？" class="headerlink" title="什么是MQ？"></a>什么是MQ？</h4><p>MQ（Message Quene）：<code>消息队列</code>，通过典型的生产者和消费者模型不断向消息队列中生产消息，消费者不断从队列中获取消息。因为消息的生产和消费是异步的，而且只关系消息的发送和接收，没有业务逻辑的侵入，轻松地实现系统间解耦。别名为消息中间件，通过利用高效可靠的消息传递机制进行平台无关的数据交流，并给予数据通信进行分布式系统的集成</p><h4 id="有哪些MQ？"><a href="#有哪些MQ？" class="headerlink" title="有哪些MQ？"></a>有哪些MQ？</h4><p>当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发<code>RocketMQ</code>等。 </p><h4 id="不同MQ的特点"><a href="#不同MQ的特点" class="headerlink" title="不同MQ的特点"></a>不同MQ的特点</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1.ActiveMQActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎!2.KafkaKafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。3.RocketMQRocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。4.RabbitMQRabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布&#x2F;订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。   </p><h4 id="什么是AMQP协议？"><a href="#什么是AMQP协议？" class="headerlink" title="什么是AMQP协议？"></a>什么是AMQP协议？</h4><p>AMQP（advanced message queuing protocol）`在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:</p><p><img src="https://static01.imgkr.com/temp/e9f8ddae9b0c4dfcb43ea6cd7a6c93f8.png"></p><h3 id="二、RabbitMQ安装"><a href="#二、RabbitMQ安装" class="headerlink" title="二、RabbitMQ安装"></a>二、RabbitMQ安装</h3><h4 id="1、RabbitMQ安装–windows"><a href="#1、RabbitMQ安装–windows" class="headerlink" title="1、RabbitMQ安装–windows"></a>1、RabbitMQ安装–windows</h4><p><a href="">RabbitMQ官网</a></p><p>RabbitMQ下载 (注意与erlang版本对应关系)</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/">Releases · rabbitmq/rabbitmq-server (github.com)</a></p><p><a href="https://github.com/rabbitmq/erlang-rpm/releases">Releases · rabbitmq/erlang-rpm (github.com)</a></p><p>RabbitMQ使用Erlang语言开发的消息队列系统 ，所以安装RabbitMQ之前需要下载安装erlang ，配置语言环境，windows系统下直接无脑下一步即可。</p><p>启动RabbitMQ Web管理界面插件：</p><p>进入/rabbitmq_server-3.8.16/sbin/目录下执行命令</p><p><code>rabbitmq-plugins enable rabbitmq_management</code></p><p>web界面连接rabbitmq端口：15672   默认账号密码：guest</p><p>Java连接rabbitmq端口：5672</p><hr><h4 id="2、RabbitMQ安装–Linux"><a href="#2、RabbitMQ安装–Linux" class="headerlink" title="2、RabbitMQ安装–Linux"></a>2、RabbitMQ安装–Linux</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.将安装包上传到服务器</span>erlang-23.3.1-1.el7.x86_64.rpm rabbitmq-server-3.8.13-1.el7.noarch.rpm<span class="token comment"># 2.安装erlang依赖包</span>yum <span class="token function">install</span> -y erlang-23.3.1-1.el7.x86_64.rpm<span class="token comment"># 3.安装rabbitmq</span>yum <span class="token function">install</span> -y rabbitmq-server-3.8.13-1.el7.noarch.rpm<span class="token comment"># 4.配置文件</span><span class="token comment">#见下方配置文件说明</span><span class="token comment"># 5.修改配置文件</span>loopback_users.guest <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment"># 6.启动rabbitmq中的插件管理</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management<span class="token comment"># 7.启动rabbitmq</span>systemctl start rabbitmq-server <span class="token comment"># 启动rabbitmq服务</span>systemctl restart rabbitmq-server <span class="token comment"># 重启服务</span>systemctl stop rabbitmq-server  <span class="token comment"># 停止服务</span><span class="token comment"># 8.查看rabbitmq状态</span>systemctl status rabbitmq-server<span class="token comment"># 9.访问rabbitmq的web管理界面</span><span class="token comment">#开放端口访问</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">15672</span>/tcp --permanentfirewall-cmd --reloadhttp://192.168.232.134:15672/  <span class="token comment">#访问</span><span class="token comment"># 10.初始登录</span>guest guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>管理命令行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.服务启动相关</span>systemctl start<span class="token operator">|</span>restart<span class="token operator">|</span>stop<span class="token operator">|</span>status rabbitmq-server<span class="token comment"># 2.管理命令行  用来在不使用web管理界面情况下命令操作RabbitMQ</span>rabbitmqctl  <span class="token builtin class-name">help</span>  可以查看更多命令<span class="token comment"># 3.插件管理命令行</span>rabbitmq-plugins <span class="token builtin class-name">enable</span><span class="token operator">|</span>list<span class="token operator">|</span>disable <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、RabbitMQ配置"><a href="#三、RabbitMQ配置" class="headerlink" title="三、RabbitMQ配置"></a>三、RabbitMQ配置</h3><h4 id="1、overview概览"><a href="#1、overview概览" class="headerlink" title="1、overview概览"></a>1、overview概览</h4><p><img src="https://static01.imgkr.com/temp/b9544a2cd9b243f49d07b6adbdd68264.png"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况&#96;channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。Exchanges：交换机，用来实现消息的路由Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、用户和虚拟主机管理"><a href="#2、用户和虚拟主机管理" class="headerlink" title="2、用户和虚拟主机管理"></a>2、用户和虚拟主机管理</h4><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><p><img src="https://static01.imgkr.com/temp/2e6470d772d94b3a84e2d2c44e2de2b6.png"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">上面的Tags选项，其实是指定用户的角色，可选的有以下几个：超级管理员(administrator)：可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。监控者(monitoring)：可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)策略制定者(policymaker)：可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。普通管理者(management)：仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。其他：无法登陆管理控制台，通常就是普通的生产者和消费者。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="添加虚拟主机"><a href="#添加虚拟主机" class="headerlink" title="添加虚拟主机"></a>添加虚拟主机</h5><p><strong>虚拟主机：</strong> <code>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</code> </p><p><img src="https://static01.imgkr.com/temp/4cae546a7ac44a72b9662ccbdb988ec7.png"></p><h5 id="用户与虚拟主机绑定，给用户添加访问权限"><a href="#用户与虚拟主机绑定，给用户添加访问权限" class="headerlink" title="用户与虚拟主机绑定，给用户添加访问权限"></a>用户与虚拟主机绑定，给用户添加访问权限</h5><p><img src="https://static01.imgkr.com/temp/98d77e7c3dcc4c2785a8ed4e6b2088b8.png"></p><p><img src="https://static01.imgkr.com/temp/9ca88c853a144afdb3a076e301bdb20e.png"></p><h3 id="四、RabbitMQ的消息模型"><a href="#四、RabbitMQ的消息模型" class="headerlink" title="四、RabbitMQ的消息模型"></a>四、RabbitMQ的消息模型</h3><blockquote><p>官网：<code>http://www.rabbitmq.com/getstarted.html</code></p></blockquote><h4 id="RabbitMQ支持的七种消息模型："><a href="#RabbitMQ支持的七种消息模型：" class="headerlink" title="RabbitMQ支持的七种消息模型："></a>RabbitMQ支持的七种消息模型：</h4><p><img src="https://static01.imgkr.com/temp/7052c840224a442eb6d44120222ff6de.jpg"></p><h4 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1、HelloWorld（直连）"><a href="#1、HelloWorld（直连）" class="headerlink" title="1、HelloWorld（直连）"></a>1、HelloWorld（直连）</h4><p><img src="https://static01.imgkr.com/temp/18b57d01ae0f4b28bad9fa54f79f4032.png"></p><h5 id="概念：点对点。生产发送消息到队列中，消费者从队列中取出消息"><a href="#概念：点对点。生产发送消息到队列中，消费者从队列中取出消息" class="headerlink" title="概念：点对点。生产发送消息到队列中，消费者从队列中取出消息"></a>概念：点对点。生产发送消息到队列中，消费者从队列中取出消息</h5><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Willivie * @Description: 生产者 * @Date: 2021/6/1 14:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Provider</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建连接mq的连接工厂对象</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq主机地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接对象</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接中的通道</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 通道绑定对应消息队列         * 参数1：队列名称，如果队列中不存在则自动创建         * 参数2：用来定义队列特性是否要持久化         * 参数3：exclusive 是否独占队列         * 参数4：autoDelete 是否在消费完成后自动删除队列         * 参数5：额外附加规则 可以设置队列最大值之类         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 发布消息         * 参数1：交换机名称         * 参数2：队列名称         * 参数3：传递消息额外设置         * 参数4：消息的具体内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Test Message!!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭资源</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author: Willivie * @Description: 消费者 * @Date: 2021/6/1 14:15 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建连接mq的连接工厂对象</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq主机地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接对象</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接中的通道</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 通道绑定对应消息队列         * 参数1：队列名称，如果队列中不存在则自动创建         * 参数2：用来定义队列特性是否要持久化         * 参数3：exclusive 是否独占队列         * 参数4：autoDelete 是否在消费完成后自动删除队列         * 参数5：额外附加规则 可以设置队列最大值之类         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 消费消息         * 参数1：队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//body就是消息队列中取出来的消息</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭资源</span><span class="token comment">//        channel.close();</span><span class="token comment">//        connection.close();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、Work-quenes（工作队列）"><a href="#2、Work-quenes（工作队列）" class="headerlink" title="2、Work quenes（工作队列）"></a>2、Work quenes（工作队列）</h4><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><p><code>Work queues，也被称为（Task queues），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</code><br><img src="https://static01.imgkr.com/temp/8fdbf1b8488e40f39b82003906ae6ee8.png"></p><h5 id="代码测试："><a href="#代码测试：" class="headerlink" title="代码测试："></a>代码测试：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"work"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" Test Message!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//body就是消息队列中取出来的消息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h5><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1 Test Message!3 Test Message!5 Test Message!7 Test Message!9 Test Message!-----------------------2 Test Message!4 Test Message!6 Test Message!8 Test Message!10 Test Message!总结：:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环调度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="消息确认机制（Message-acknowledgment）"><a href="#消息确认机制（Message-acknowledgment）" class="headerlink" title="消息确认机制（Message acknowledgment）"></a>消息确认机制（Message acknowledgment）</h5><p>完成一项任务可能需要几秒钟。您可能想知道，如果其中一个消费者开始了一项长期任务并且只完成了部分任务的过程中宕机了，会发生什么。使用我们当前的代码，一旦 RabbitMQ 将消息传递给消费者，它会立即将其标记为删除。在这种情况下，如果你停止掉一个消费者，我们将丢失它刚刚处理的消息。我们还将丢失所有已分派给该特定工作人员但尚未处理的消息。 </p><p><strong>为了确保消息永远不会丢失，RabbitMQ 支持消息确认。消费者发回确认消息，告诉 RabbitMQ 特定消息已被接收、处理，并且 RabbitMQ 可以自由删除它。</strong> </p><h5 id="代码测试：-1"><a href="#代码测试：-1" class="headerlink" title="代码测试："></a>代码测试：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取连接对象</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取连接中的通道</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通道绑定对应消息队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一次只接受一条未确认的消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 消费消息         * 参数1：队列名称         * 参数2：开始消息的自动确认机制  这里关闭确认机制，采用手动确认，防止消息丢失         * 参数3：消费时的回调接口         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//body就是消息队列中取出来的消息</span>            <span class="token annotation punctuation">@SneakyThrows</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*                 * 手动确认消息                 * 参数1：手动消息确认标识                 * 参数2：是否支持多条同时确认 为false每次确认一个                 */</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionFactory</span> factory<span class="token punctuation">;</span>    <span class="token comment">//类加载执行，只执行一次</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建连接mq的连接工厂对象</span>        factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接rabbitmq主机地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置端口号</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置连接哪个虚拟主机</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置访问虚拟主机的用户名和密码</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 定义提供连接的方法     *     * @return 连接对象     */</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 定义关闭连接的方法     *     * @param connection 连接对象     * @param channel    连接的通道对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试结果：-1"><a href="#测试结果：-1" class="headerlink" title="测试结果："></a>测试结果：</h5><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">2 Test Message!------------------1 Test Message!3 Test Message!4 Test Message!5 Test Message!6 Test Message!7 Test Message!8 Test Message!9 Test Message!总结：当一个消费者宕机或者断网之类的，自动确认机制被拿到消息就会丢失。但是通过这种手动确认消息的方式，就可以实现能者多劳的机制。消费消息快的机器多消费，消费慢的少消费。这保障了消息不会丢失。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、Publish-Subscribe（订阅模型-Fanout）"><a href="#3、Publish-Subscribe（订阅模型-Fanout）" class="headerlink" title="3、Publish/Subscribe（订阅模型-Fanout）"></a>3、Publish/Subscribe（订阅模型-Fanout）</h4><p><code>fanout 扇出 也称为广播</code></p><p><img src="https://static01.imgkr.com/temp/aa974976ee5440fda341094a9ef3915e.png"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">在广播模式下，消息发送流程是这样的：可以有多个消费者每个消费者有自己的queue（队列）每个队列都要绑定到Exchange（交换机）生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。交换机把消息发送给绑定过的所有队列队列的消费者都能拿到消息。实现一条消息被多个消费者消费<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码测试：-2"><a href="#代码测试：-2" class="headerlink" title="代码测试："></a>代码测试：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Provider</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 将通道声明指定交换机         * 参数1：交换机名称         * 参数2：交换机类型 fanout 广播类型         */</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发布消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"fanout message!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放资源</span>        <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//消费者2，3和这个一样</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通道绑定交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//临时队列</span>        <span class="token class-name">String</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绑定交换机和队列</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token string">"logs"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">消费者1：fanout message!-----------------------消费者2：fanout message!-----------------------消费者3：fanout message!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、Routing-（订阅模型-Direct）"><a href="#4、Routing-（订阅模型-Direct）" class="headerlink" title="4、Routing （订阅模型-Direct）"></a>4、Routing （订阅模型-Direct）</h4><h5 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h5><p><code>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code> </p><p>在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>Routing Key</code>（路由key）</li><li>消息的发送方在 向 <code>Exchange</code>发送消息时，也必须指定消息的<code> Routing Key</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routing key</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><img src="https://static01.imgkr.com/temp/63ddb1ed010e421db1b6e3c1ebb79db2.png">  </p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h5 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Provider</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 将通道声明指定交换机         * 参数1：交换机名称         * 参数2：交换机类型 direct 广播类型         */</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> routingkey <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 发布消息 给指定routing key的队列         * 参数1：交换机名称         * 参数2：指定routing key的队列         * 参数3：传递消息额外设置 可以在这里设置消息持久化 如：MessageProperties.PERSISTENT_TEXT_PLAIN         * 参数4：消息的具体内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span> routingkey<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Direct Message："</span> <span class="token operator">+</span> routingkey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放资源</span>        <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将通道声明指定交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个临时队列</span>        <span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//基于routing key 绑定队列和交换机</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 消费消息         * 参数1：队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer2</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将通道声明指定交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个临时队列</span>        <span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//基于routing key 绑定队列和交换机</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 消费消息         * 参数1：队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果</p><pre class="line-numbers language-none"><code class="language-none">消费者1：Direct Message：error---------------------------------消费者2：Direct Message：info消费者2：Direct Message：error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、Topics（订阅模型-Topic）"><a href="#5、Topics（订阅模型-Topic）" class="headerlink" title="5、Topics（订阅模型-Topic）"></a>5、Topics（订阅模型-Topic）</h4><p><code>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key的时候使用通配符！这种模型Routingkey 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert</code></p><p><img src="https://static01.imgkr.com/temp/400fdeb984e64b83be323adcd48719f6.png"></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"># 通配符* (star) 匹配1个词# (hash) 匹配0-N个词# 如:user.#   匹配user.name.update或者 user.update 等user.*   只能匹配 user.save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Provider</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 将通道声明指定交换机         * 参数1：交换机名称         * 参数2：交换机类型 topic 广播类型         */</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> routingkey <span class="token operator">=</span> <span class="token string">"user.update.insert"</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 发布消息 给指定routing key的队列         * 参数1：交换机名称         * 参数2：指定routing key的队列         * 参数3：传递消息额外设置 可以在这里设置消息持久化 如：MessageProperties.PERSISTENT_TEXT_PLAIN         * 参数4：消息的具体内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span> routingkey<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Topic Message："</span> <span class="token operator">+</span> routingkey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放资源</span>        <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMqUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将通道声明指定交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span> <span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个临时队列</span>        <span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 绑定队列和交换机 动态通配符形式route key         * user.* 代表user.xxxx 这里往后匹配一个单词         * user.# 代表可以往后匹配0—N个单词         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"topics"</span><span class="token punctuation">,</span> <span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 消费消息         * 参数1：队列名称         * 参数2：开始消息的自动确认机制         * 参数3：消费时的回调接口         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、项目中集成RabbitMQ"><a href="#五、项目中集成RabbitMQ" class="headerlink" title="五、项目中集成RabbitMQ"></a>五、项目中集成RabbitMQ</h3><h4 id="前置环境配置"><a href="#前置环境配置" class="headerlink" title="前置环境配置"></a>前置环境配置</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 10.15.0.9    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> ems    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /ems<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1、Hello-world（直连）"><a href="#1、Hello-world（直连）" class="headerlink" title="1、Hello world（直连）"></a>1、Hello world（直连）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//消费者</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//绑定hello队列</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、Work-queue-工作队列"><a href="#2、Work-queue-工作队列" class="headerlink" title="2、Work queue (工作队列)"></a>2、Work queue (工作队列)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"hello work!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要yml配置</span><span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>  <span class="token key atrule">listener</span><span class="token punctuation">:</span>    <span class="token key atrule">simple</span><span class="token punctuation">:</span>      <span class="token key atrule">prefetch</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 每个消费者每次可以消费一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、Fanout（广播）"><a href="#3、Fanout（广播）" class="headerlink" title="3、Fanout（广播）"></a>3、Fanout（广播）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"这是日志广播"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//消费者</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>           value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span><span class="token comment">//创建临时队列</span>           exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token comment">//绑定交换机类型</span>   <span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>           value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span> <span class="token comment">//创建临时队列</span>           exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>  <span class="token comment">//绑定交换机类型</span>   <span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、Route-路由模型"><a href="#4、Route-路由模型" class="headerlink" title="4、Route 路由模型"></a>4、Route 路由模型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"error 的日志信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//消费者</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//创建临时队列</span>        key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//指定routing key匹配与交换机的绑定</span>        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span> <span class="token comment">//交换机类型</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"directs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、Topics-（动态路由模型）"><a href="#5、Topics-（动态路由模型）" class="headerlink" title="5、Topics （动态路由模型）"></a>5、Topics （动态路由模型）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//生产者</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.save.findAll"</span><span class="token punctuation">,</span><span class="token string">"user.save.findAll 的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//消费者</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopCustomer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span> <span class="token comment">//创建临时队列</span>            key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.*"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 动态路由规则</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">)</span> <span class="token comment">//交换机类型</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>            key <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user.#"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、MQ的应用场景"><a href="#六、MQ的应用场景" class="headerlink" title="六、MQ的应用场景"></a>六、MQ的应用场景</h3><h4 id="1、异步处理"><a href="#1、异步处理" class="headerlink" title="1、异步处理"></a>1、异步处理</h4><p><code>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法是并行处理</code></p><p><img src="https://static01.imgkr.com/temp/a910a922255b43b88efa0b256033ff8a.png"></p><p>这种处理方式最大的弊端就是随着业务的复杂性越来高，接口响应的时间也就越长。</p><p>引入消息队列后，在接收到支付成功后，其他服务监听到发送的支付成功消息 ，就可以异步处理了</p><p><img src="https://static01.imgkr.com/temp/e336e120b18245899c6544ab8f743fda.png"></p><p>上面的异步处理实际用线程，线程池去也是可以的，但是这里就引出了MQ的第二个优点</p><h4 id="2、解耦"><a href="#2、解耦" class="headerlink" title="2、解耦"></a>2、解耦</h4><p><code>场景说明：一个订单流程需要扣积分，扣优惠券，发短信，扣库存。。。等等。如果每次加一个你要调用一个接口然后还要重新发布系统,出现问题调试时也会牵一发而动全身，是不是非常繁琐？消息队列的存在，可以让各个业务逻辑之间解耦，让服务场景只专注于自身的业务。</code></p><p><img src="https://static01.imgkr.com/temp/4ba458b6fea74a7491e4a6f7e091e07d.png"></p><h4 id="3、削峰"><a href="#3、削峰" class="headerlink" title="3、削峰"></a>3、削峰</h4><p><code>最常见的场景: 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。   </code></p><p><img src="https://static01.imgkr.com/temp/c0809351be8d4dde8881938bf11285ba.png"></p><p>作用</p><ol><li>可以控制活动人数，超过此一定阀值的订单直接丢弃</li><li>可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单)  </li></ol>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos服务注册和配置中心</title>
      <link href="2021/05/26/nacos-fu-wu-zhu-ce-he-pei-zhi-zhong-xin/"/>
      <url>2021/05/26/nacos-fu-wu-zhu-ce-he-pei-zhi-zhong-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p></blockquote><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h5 id="Nacos是什么？"><a href="#Nacos是什么？" class="headerlink" title="Nacos是什么？"></a>Nacos是什么？</h5><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>nacos： Naming and Configuration Service的缩写</p><p>Nacos就是注册中心 + 配置中心的组合；Nacos = Eureka+Config +Bus</p><span id="more"></span><h3 id="二、Nacos安装与运行"><a href="#二、Nacos安装与运行" class="headerlink" title="二、Nacos安装与运行"></a>二、Nacos安装与运行</h3><p>下载链接：<a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p><p>下载后进入bin目录，打开cmd键入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动命令(standalone代表着单机模式运行，非集群模式):</span>startup.cmd -m standalone <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>命令运行成功后直接访问<code>http://localhost:8848/nacos，</code>默认账号密码都是nacos</p><p><img src="https://static01.imgkr.com/temp/41ee7cf6e2fe46b0a358156cc5a58064.png"></p><p><img src="https://static01.imgkr.com/temp/09cfa6e217db4371aebad7522aa23ba9.png"></p><h3 id="三、Nacos作为服务注册中心"><a href="#三、Nacos作为服务注册中心" class="headerlink" title="三、Nacos作为服务注册中心"></a>三、Nacos作为服务注册中心</h3><h5 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--父模块引入SpringCloud Alibaba--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--SpringCloud ailibaba nacos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#配置Nacos地址</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、主启动"><a href="#3、主启动" class="headerlink" title="3、主启动"></a>3、主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain9001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、新增测试类"><a href="#4、新增测试类" class="headerlink" title="4、新增测试类"></a>4、新增测试类</h5><p>输入地址访问：<code>http://localhost:9001/payment/nacos/1</code>,访问成功后，在访问nacos服务后台看到服务列表出现新建的客户端实例即部署成功。</p><h5 id="5、各种注册中心对比"><a href="#5、各种注册中心对比" class="headerlink" title="5、各种注册中心对比"></a>5、各种注册中心对比</h5><p><img src="https://static01.imgkr.com/temp/6ebe850f396e4662a6e1cd29d5169f4e.jpeg"></p><p><img src="https://static01.imgkr.com/temp/c5c1252e3afb4cd88e3e0183451f4426.jpeg"></p><p>C是所有节点在同一时间看到的数据是一致的；而A的定义是所有的请求都会收到响应。</p><p>何时选择使用何种模式？<br>一般来说，<br>如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如 Spring cloud 和 Dubbo 服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例。</p><p>如果需要在服务级别编辑或者存储配置信息，那么 CP 是必须，K8S服务和DNS服务则适用于CP模式。<br>CP模式下则支持注册持久化实例，此时则是以 Raft 协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p><p>curl -X PUT ‘$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP’</p><h3 id="四、Nacos作为服务配置中心"><a href="#四、Nacos作为服务配置中心" class="headerlink" title="四、Nacos作为服务配置中心"></a>四、Nacos作为服务配置中心</h3><blockquote><p>官网：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p></blockquote><h5 id="1、pom-xml-1"><a href="#1、pom-xml-1" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--nacos-config--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、bootstrap-yml"><a href="#2、bootstrap-yml" class="headerlink" title="2、bootstrap.yml"></a>2、bootstrap.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># nacos配置</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#Nacos服务注册中心地址</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#Nacos作为配置中心地址</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml <span class="token comment">#指定yml格式的配置</span>        <span class="token comment">#配对公司 $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment"># 表示开发环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>为啥有两个配置文件</strong>：<code>Nacos同springcloud-config一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application</code> </p><h5 id="4、业务类"><a href="#4、业务类" class="headerlink" title="4、业务类"></a>4、业务类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//在控制器类加入@RefreshScope注解使当前类下的配置支持Nacos的动态刷新功能。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;config.info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、Nacos服务端添加配置文件-与配置文件对应"><a href="#5、Nacos服务端添加配置文件-与配置文件对应" class="headerlink" title="5、Nacos服务端添加配置文件 与配置文件对应"></a>5、Nacos服务端添加配置文件 与配置文件对应</h5><p><img src="https://static01.imgkr.com/temp/eaf382c9b42949f7b2e6caac52eb8e44.jpeg"></p><p><img src="https://static01.imgkr.com/temp/1e0c2d2da9de403c9319f0170debffbf.jpeg"></p><h5 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h5><p>启动客户端，访问地址：<code>http://localhost:3377/config/info</code>，读取到客户端的配置文件内容即配置成功。</p><p>修改下Nacos中的yaml配置文件，再次调用查看配置的接口，就会发现配置已经刷新，这就是Nacos自带动态刷新功能。</p><h3 id="五、Nacos作为配置中心-分类配置"><a href="#五、Nacos作为配置中心-分类配置" class="headerlink" title="五、Nacos作为配置中心-分类配置"></a>五、Nacos作为配置中心-分类配置</h3><p>一个大型分布式微服务系统会有很多微服务子项目，每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境等。Nacos可以进行项目分类配置。</p><h4 id="配置领域模型"><a href="#配置领域模型" class="headerlink" title="配置领域模型"></a>配置领域模型</h4><p>Nacos 数据模型 Key 由三元组唯一确定, Namespace默认是空串，公共命名空间（public），分组默认是 DEFAULT_GROUP。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/338441/1561217857314-95ab332c-acfb-40b2-957a-aae26c2b5d71.jpeg"></p><h5 id="默认情况："><a href="#默认情况：" class="headerlink" title="默认情况："></a>默认情况：</h5><p>Namespace=public，Group=DEFAULT_GROUP, 默认Cluster是DEFAULT</p><p>Nacos默认的命名空间是public，Namespace主要用来实现隔离。<br>比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p><p>Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去</p><p>Service就是微服务；一个Service可以包含多个Cluster（集群），Nacos默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。</p><h4 id="1、DataID方案"><a href="#1、DataID方案" class="headerlink" title="1、DataID方案"></a>1、DataID方案</h4><p>指定spring.profile.active和配置文件的DataID来使不同环境下读取不同的配置</p><p><img src="https://static01.imgkr.com/temp/7f71072c8a40489fb9f6dc5536960466.jpeg"></p><p><img src="https://static01.imgkr.com/temp/1bd9026efb7f4b8ca6ea2037c4a64ed3.jpeg"></p><h4 id="2、Group方案"><a href="#2、Group方案" class="headerlink" title="2、Group方案"></a>2、Group方案</h4><p>通过Group实现环境区分</p><p><img src="https://static01.imgkr.com/temp/28bbcf8f874b48c0a1395288a9137e5f.jpeg"></p><p><img src="https://static01.imgkr.com/temp/0bfa3aa1831847c59e1d04b3a6449b04.jpeg"></p><h4 id="3、Namespace方案"><a href="#3、Namespace方案" class="headerlink" title="3、Namespace方案"></a>3、Namespace方案</h4><p>通过命名空间实现环境区分</p><p><img src="https://static01.imgkr.com/temp/02aa3a81504041e0888e02e1bf04bcc3.jpeg"></p><p><img src="https://static01.imgkr.com/temp/86f66241130349b280c46410cd9cb313.png"></p><h3 id="六、Nacos集群和持久化配置"><a href="#六、Nacos集群和持久化配置" class="headerlink" title="六、Nacos集群和持久化配置"></a>六、Nacos集群和持久化配置</h3><p>…….</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud Alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Bus消息总线</title>
      <link href="2021/05/23/springcloud-bus-xiao-xi-zong-xian/"/>
      <url>2021/05/23/springcloud-bus-xiao-xi-zong-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://cloud.spring.io/spring-cloud-bus/reference/html/">https://cloud.spring.io/spring-cloud-bus/reference/html/</a></p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。它整合了Java的事件处理机制和消息中间件的功能。<br>Spring Clud Bus目前支持RabbitMQ和Kafka。</p><p>Spring Cloud Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。</p><span id="more"></span><p><img src="https://springcloud-oss.oss-cn-shanghai.aliyuncs.com/chapter8/configbus1.jpg" alt="img"> </p><p>根据此图我们可以看出利用Spring Cloud Bus做配置更新的步骤:</p><ol><li>提交代码触发post给客户端A发送bus/refresh</li><li>客户端A接收到请求从Server端更新配置并且发送给Spring Cloud Bus</li><li>Spring Cloud bus接到消息并通知给其它客户端</li><li>其它客户端接收到通知，请求Server端获取最新配置</li><li>全部客户端均获取到最新的配置</li></ol><h2 id="二、配置及使用"><a href="#二、配置及使用" class="headerlink" title="二、配置及使用"></a>二、配置及使用</h2><p>首先必须先具备良好的RabbitMQ环境先，这里不做赘述。</p><h4 id="配置Config服务端"><a href="#配置Config服务端" class="headerlink" title="配置Config服务端"></a>配置Config服务端</h4><h5 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--添加消息总线RabbitMQ支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span>  cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment">#注册进Eureka服务器的微服务名</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/willivie/springcloud<span class="token punctuation">-</span>config.git <span class="token comment">#Gitee上面的git仓库名字</span>          <span class="token comment">####搜索目录</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config      <span class="token comment">####读取分支</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master<span class="token comment">#服务注册到eureka地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span class="token comment">##rabbitmq相关配置,暴露bus刷新配置的端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span> <span class="token comment">#暴露bus刷新配置的端点</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'bus-refresh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置Config客户端"><a href="#配置Config客户端" class="headerlink" title="配置Config客户端"></a>配置Config客户端</h4><h5 id="1、pom-xml-和服务端一致"><a href="#1、pom-xml-和服务端一致" class="headerlink" title="1、pom.xml 和服务端一致"></a>1、pom.xml 和服务端一致</h5><h5 id="2、bootstrap-yml"><a href="#2、bootstrap-yml" class="headerlink" title="2、bootstrap.yml"></a>2、bootstrap.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment">#Config客户端配置</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment">#分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址</span><span class="token comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token comment">#服务注册到eureka地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span class="token comment"># 暴露监控端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span>   <span class="token comment"># 'refresh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置后，修改Gitee上的配置文件内容，发送请求命令<code>curl -X POST &quot;http://localhost:3355/actuator/bus-refresh&quot;</code>，即可刷新所有客户端配置。</p><h4 id="刷新定点通知"><a href="#刷新定点通知" class="headerlink" title="刷新定点通知"></a>刷新定点通知</h4><p>不想全部通知，只想定点通知</p><p>公式：<code>http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code></p><p>示例：<code>&quot;http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud Bus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Config配置中心</title>
      <link href="2021/05/22/config-pei-zhi-zhong-xin/"/>
      <url>2021/05/22/config-pei-zhi-zhong-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/</a></p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h5 id="Config是什么"><a href="#Config是什么" class="headerlink" title="Config是什么?"></a>Config是什么?</h5><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p><h5 id="Config怎么使用？"><a href="#Config怎么使用？" class="headerlink" title="Config怎么使用？"></a>Config怎么使用？</h5><p>SpringCloud Config分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p><p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</p><p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><span id="more"></span><h5 id="Config的特性："><a href="#Config的特性：" class="headerlink" title="Config的特性："></a>Config的特性：</h5><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><h2 id="二、配置与使用"><a href="#二、配置与使用" class="headerlink" title="二、配置与使用"></a>二、配置与使用</h2><h4 id="Config服务端配置"><a href="#Config服务端配置" class="headerlink" title="Config服务端配置"></a>Config服务端配置</h4><h5 id="1、配置前准备"><a href="#1、配置前准备" class="headerlink" title="1、配置前准备"></a>1、配置前准备</h5><p>首先在自己Gitee账号新建仓库springcloud-config，并在仓库下创建config.yml文件</p><h5 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、application-yml"><a href="#3、application-yml" class="headerlink" title="3、application.yml"></a>3、application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span>  cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment">#注册进Eureka服务器的微服务名</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/willivie/springcloud<span class="token punctuation">-</span>config.git <span class="token comment">#Gitee上面的git仓库名字</span>          <span class="token comment">####搜索目录</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config      <span class="token comment">####读取分支</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master<span class="token comment">#服务注册到eureka地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、主启动"><a href="#4、主启动" class="headerlink" title="4、主启动"></a>4、主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span> <span class="token comment">//激活对配置中心的支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenterMain3344</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigCenterMain3344</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、测试通过Config微服务是否可以从Gitee上获取配置内容"><a href="#5、测试通过Config微服务是否可以从Gitee上获取配置内容" class="headerlink" title="5、测试通过Config微服务是否可以从Gitee上获取配置内容"></a>5、测试通过Config微服务是否可以从Gitee上获取配置内容</h5><p>输入地址：<code>http://localhost:3344/master/config/dev</code></p><p>访问成功后页面上的内容是否与Gitee仓库的文件内容一样就代表配置成功。返回信息如下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"config"</span><span class="token punctuation">,</span><span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dev"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"label"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"85a4aa109ccd4c46992a4e867c99b90e3cf56570"</span><span class="token punctuation">,</span><span class="token property">"state"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span><span class="token property">"propertySources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"https://gitee.com/willivie/springcloud-config.git/config-dev.yml"</span><span class="token punctuation">,</span><span class="token property">"source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"config.info"</span><span class="token operator">:</span> <span class="token string">"master branch,springcloud-config/config-dev.yml version=1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的返回的信息包含了配置文件的位置、版本、配置文件的名称以及配置文件中的具体内容，说明server端已经成功获取了git仓库的配置信息。</p><p>如果直接查看配置文件中的配置信息可访问：<code>http://localhost:3344/master/config-dev.yml</code>，返回：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>  <span class="token key atrule">info</span><span class="token punctuation">:</span> master branch<span class="token punctuation">,</span>springcloud<span class="token punctuation">-</span>config/config<span class="token punctuation">-</span>dev.yml version=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>仓库中的配置文件会被转换成web接口，访问可以参照以下的规则：</p><ul><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul><h3 id="Config客户端配置"><a href="#Config客户端配置" class="headerlink" title="Config客户端配置"></a>Config客户端配置</h3><h4 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、bootstrap-yml"><a href="#2、bootstrap-yml" class="headerlink" title="2、bootstrap.yml"></a>2、bootstrap.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment">#Config客户端配置</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment">#分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址k</span><span class="token comment">#服务注册到eureka地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>注： bootstrap.yml是什么？</strong></p><p><code>applicaiton.yml</code> 是用户级的资源配置项<br><code>bootstrap.yml</code> 是系统级的，优先级更加高</p><p>Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的<code>Application Context</code>的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p><p><code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。 <code>Bootstrap context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p><p>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，<br>因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p><hr><h5 id="3、主启动"><a href="#3、主启动" class="headerlink" title="3、主启动"></a>3、主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment">//无需额外配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientMain3355</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigClientMain3355</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4、新增测试类controller"><a href="#4、新增测试类controller" class="headerlink" title="4、新增测试类controller"></a>4、新增测试类controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;config.info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入地址访问：<code>http://localhost:3355/configInfo</code>，成功显示gitee的配置文件内容</p><pre class="line-numbers language-none"><code class="language-none">master branch,springcloud-config&#x2F;config-dev.yml version&#x3D;3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功实现了客户端3355访问SpringCloud Config3344通过Gitee获取配置信息</p><h2 id="三、Config客户端之动态刷新"><a href="#三、Config客户端之动态刷新" class="headerlink" title="三、Config客户端之动态刷新"></a>三、Config客户端之动态刷新</h2><p>###现在存在的问题以及解决方案：</p><p>修改Gitee上的配置文件内容做调整后，刷新config服务端，发现ConfigServer配置中心立刻更新内容，但是ConfigClient客户端没有任何更新，任然是修改前的值。重启config客户端后，就可以获取更新后的内容。</p><p>但是每次重启服务来获取更新的配置，难免有点繁琐而且不符合应用程序的设计。那么避免每次更新配置都要重启客户端微服务3355，添加动态刷新配置</p><h5 id="1、pom-xml新增依赖"><a href="#1、pom-xml新增依赖" class="headerlink" title="1、pom.xml新增依赖"></a>1、pom.xml新增依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、bootstrap新增依赖"><a href="#2、bootstrap新增依赖" class="headerlink" title="2、bootstrap新增依赖"></a>2、bootstrap新增依赖</h5><pre class="line-numbers language-yam" data-language="yam"><code class="language-yam"># 暴露监控端点management:  endpoints:    web:      exposure:        include: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、controller类新增注解"><a href="#3、controller类新增注解" class="headerlink" title="3、controller类新增注解"></a>3、controller类新增注解</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span> <span class="token comment">//新增注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;config.info&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置结束后，再次修改Gitee上的配置文件内容，需要发送请求命令<code>curl -X POST &quot;http://localhost:3355/actuator/refresh&quot;</code>刷新配置。再次获取配置内容发现已经更新成功。这样就达到了，避免服务重启的步骤达到获取更新配置的目的。</p><h5 id="想想还有什么问题？"><a href="#想想还有什么问题？" class="headerlink" title="想想还有什么问题？"></a>想想还有什么问题？</h5><p>假如有多个微服务客户端3355/3366/3377…等等</p><p>每个微服务都要执行一次post请求，手动刷新？</p><p>可否广播，一次通知，处处生效？这里引入SpringCloud Bus消息总线，实现一次请求，批量刷新。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gateway服务网关</title>
      <link href="2021/05/21/gateway-fu-wu-wang-guan/"/>
      <url>2021/05/21/gateway-fu-wu-wang-guan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><strong>简介</strong></p><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。<br>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等</p><p>SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><span id="more"></span><p><strong>相关概念</strong></p><ul><li>Route（路由）：这是网关的基本构建块。它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li><li>Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li><li>Filter（过滤器）：这是<code>org.springframework.cloud.gateway.filter.GatewayFilter</code>的实例，我们可以使用它修改请求和响应。</li></ul><p><strong>工作流程</strong></p><p><img src="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/images/spring_cloud_gateway_diagram.png"></p><p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。</p><p>Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。<br>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><p>Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，<br>在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><h2 id="二、配置与使用"><a href="#二、配置与使用" class="headerlink" title="二、配置与使用"></a>二、配置与使用</h2><h3 id="1、Route（路由）"><a href="#1、Route（路由）" class="headerlink" title="1、Route（路由）"></a>1、Route（路由）</h3><h4 id="Spring-Cloud-Gateway-网关路由有两种配置方式："><a href="#Spring-Cloud-Gateway-网关路由有两种配置方式：" class="headerlink" title="Spring Cloud Gateway 网关路由有两种配置方式："></a>Spring Cloud Gateway 网关路由有两种配置方式：</h4><ul><li>在配置文件 yml 中配置</li><li>通过<code>@Bean</code>自定义 RouteLocator，或者在在启动主类 Application 中配置 </li></ul><h4 id="pom-xml-引入依赖"><a href="#pom-xml-引入依赖" class="headerlink" title="pom.xml 引入依赖"></a>pom.xml 引入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式一：application-yml"><a href="#方式一：application-yml" class="headerlink" title="方式一：application.yml"></a>方式一：application.yml</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> wwl_route        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//willivie.gitee.io        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Path=/about<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式二：自定义RouteLocator"><a href="#方式二：自定义RouteLocator" class="headerlink" title="方式二：自定义RouteLocator"></a>方式二：自定义RouteLocator</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 配置了一个id为route-name的路由规则，     * 当访问地址 http://localhost:9527/guonei时会自动转发到地址：http://news.baidu.com/guonei     *     * @param builder     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route_wwl"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Predicate（断言）"><a href="#2、Predicate（断言）" class="headerlink" title="2、Predicate（断言）"></a>2、Predicate（断言）</h3><p>在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。匹配成功则能请求成功，否则报错404.网上有一张图总结了 Spring Cloud 内置的几种 Predicate 的实现。 </p><p><img src="https://static01.imgkr.com/temp/82d830d5b4724ebd81019f5db489275e.png"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2 <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>   <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>          <span class="token comment">#匹配后提供服务的路由地址</span>   <span class="token key atrule">predicates</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> Path=/payment/lb/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>     <span class="token punctuation">-</span> After=2020<span class="token punctuation">-</span>02<span class="token punctuation">-</span>05T15<span class="token punctuation">:</span>10<span class="token punctuation">:</span>03.685+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>    <span class="token comment"># 断言，路径相匹配的进行路由</span>    <span class="token comment">#- Before=2020-02-05T15:10:03.685+08:00[Asia/Shanghai]  # 断言，路径相匹配的进行路由</span>    <span class="token comment">#- Between=2020-02-02T17:45:06.206+08:00[Asia/Shanghai],2020-03-25T18:59:06.206+08:00[Asia/Shanghai]</span>    <span class="token comment">#- Cookie=username,zzyy</span>    <span class="token comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span>    <span class="token comment">#- Host=**.baidu.com</span>     <span class="token punctuation">-</span> Method=GET     <span class="token punctuation">-</span> Query=username<span class="token punctuation">,</span> \d+  <span class="token comment"># 要有参数名username并且值还要是整数才能路由</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</strong> </p><blockquote><p>cmd请求测试：curl <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a> –cookie “name”=”wwl”</p></blockquote><h4 id="3、Filter（过滤器）"><a href="#3、Filter（过滤器）" class="headerlink" title="3、Filter（过滤器）"></a>3、Filter（过滤器）</h4><p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre” 和 “post”。</p><ul><li><strong>PRE</strong>： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li><strong>POST</strong>：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li></ul><p>Spring Cloud Gateway 的 Filter 分为两种：GatewayFilter 与 GlobalFilter。GlobalFilter 会应用到所有的路由上，而 GatewayFilter 将应用到单个路由或者一个分组的路由上。</p><p>Spring Cloud Gateway 内置了9种 GlobalFilter，比如 Netty Routing Filter、LoadBalancerClient Filter、Websocket Routing Filter 等，根据名字即可猜测出这些 Filter 的作者，具体参考官网内容：<a href="http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_global_filters">Global Filters</a></p><p>利用 GatewayFilter 可以修改请求的 Http 的请求或者响应，或者根据请求或者响应做一些特殊的限制。 更多时候我们会利用 GatewayFilter 做一些具体的路由配置。</p><h5 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> add_request_parameter_route        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.org        <span class="token key atrule">filters</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> AddRequestParameter=X<span class="token punctuation">-</span>Request<span class="token punctuation">-</span>Id<span class="token punctuation">,</span><span class="token number">1024</span> <span class="token comment">#过滤器工厂会在匹配的请求头加上一对请求头，名称为X-Request-Id值为1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义全局GlobalFilter"><a href="#自定义全局GlobalFilter" class="headerlink" title="自定义全局GlobalFilter"></a>自定义全局GlobalFilter</h5><p>这里可以做网关全局日志记录，    统一登录鉴权等。例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 执行了自定义的全局过滤器: "</span> <span class="token operator">+</span> <span class="token string">"MyLogGateWayFilter"</span> <span class="token operator">+</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****用户名为null，无法登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、配置动态路由"><a href="#4、配置动态路由" class="headerlink" title="4、配置动态路由"></a>4、配置动态路由</h3><p>默认情况下Gateway会根据注册中心注册的服务列表，<br>以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment">#匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2 <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service <span class="token comment">#匹配后提供服务的路由地址</span>          <span class="token comment">#    lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/lb/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#服务提供者provider注册进eureka服务列表内</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务熔断与降级-Hystrix</title>
      <link href="2021/05/19/fu-wu-rong-duan-yu-jiang-ji-hystrix/"/>
      <url>2021/05/19/fu-wu-rong-duan-yu-jiang-ji-hystrix/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a> </p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h3><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p><p>如：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p><span id="more"></span><p><img src="http://favorites.ren/assets/images/2017/springcloud/hystrix-1.png" alt="img"> </p><h3 id="Hystrix是什么？"><a href="#Hystrix是什么？" class="headerlink" title="Hystrix是什么？"></a>Hystrix是什么？</h3><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。通过hystrix可以解决雪崩效应问题，它提供了资源隔离、降级机制、熔断、缓存等功能。 </p><h2 id="二、Hystrix的三个重要特性"><a href="#二、Hystrix的三个重要特性" class="headerlink" title="二、Hystrix的三个重要特性"></a>二、Hystrix的三个重要特性</h2><h3 id="1、服务降级"><a href="#1、服务降级" class="headerlink" title="1、服务降级"></a>1、服务降级</h3><p>某个服务超时或者异常时，不让客户端等待并立刻返回一个友好提示。我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存. </p><h4 id="哪些情况会触发降级？"><a href="#哪些情况会触发降级？" class="headerlink" title="哪些情况会触发降级？"></a>哪些情况会触发降级？</h4><ul><li>程序运行异常</li><li>请求超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量满了也会触发服务降级</li></ul><h4 id="服务提供者配置服务降级"><a href="#服务提供者配置服务降级" class="headerlink" title="服务提供者配置服务降级"></a>服务提供者配置服务降级</h4><h5 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主启动添加注解"><a href="#主启动添加注解" class="headerlink" title="主启动添加注解"></a>主启动添加注解</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token comment">//开启熔断器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystrixMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentHystrixMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="业务类激活"><a href="#业务类激活" class="headerlink" title="业务类激活"></a>业务类激活</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 超时访问，演示降级   *   * @param id 参数   * @return 返回   */</span>  <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentInfo_TimeOutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"100000"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token string">"O(∩_∩)O，耗费3秒"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOutHandler</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">"/(ㄒoㄒ)/调用支付接口超时或异常"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务消费者配置服务降级（Feign-Hystrix）-全局配置优化，避免代码混乱，统一和自定义分开"><a href="#服务消费者配置服务降级（Feign-Hystrix）-全局配置优化，避免代码混乱，统一和自定义分开" class="headerlink" title="服务消费者配置服务降级（Feign+Hystrix） 全局配置优化，避免代码混乱，统一和自定义分开"></a>服务消费者配置服务降级（Feign+Hystrix） 全局配置优化，避免代码混乱，统一和自定义分开</h4><h5 id="pom配置-1"><a href="#pom配置-1" class="headerlink" title="pom配置"></a>pom配置</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--openfeign--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--hystrix--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主启动"><a href="#主启动" class="headerlink" title="主启动"></a>主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableHystrix</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystrixMain80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderHystrixMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span>ribbon: <span class="token comment">#使用feign调用服务器提供者的接口，这里的优先级时间高于@HystrixCommand注解里的value超时时间</span>  <span class="token comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span>  ReadTimeout: <span class="token number">5000</span>  <span class="token comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span>  ConnectTimeout: <span class="token number">5000</span> <span class="token comment">#使用全局配置服务降级时，这里配置Hystrix超时时间</span>hystrix:  command:    default:      execution:        isolation:          thread:            timeoutInMilliseconds: <span class="token number">1500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用端配置方式1：配置到controller"><a href="#调用端配置方式1：配置到controller" class="headerlink" title="调用端配置方式1：配置到controller"></a>调用端配置方式1：配置到controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"payment_Global_FallbackMethod"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystirxController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span> <span class="token comment">//加了@DefaultProperties属性注解，并且没有写具体方法名字，就用统一全局的服务降级方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 下面是全局fallback方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_Global_FallbackMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用端配置方式2：配置接口实现类"><a href="#调用端配置方式2：配置接口实现类" class="headerlink" title="调用端配置方式2：配置接口实现类"></a>调用端配置方式2：配置接口实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">PaymentFallbackService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/ok/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/timeout/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"fallBack method===="</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"fallBack method####"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、服务熔断"><a href="#2、服务熔断" class="headerlink" title="2、服务熔断"></a>2、服务熔断</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，<br>会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。<br>当检测到该节点微服务调用响应正常后，恢复调用链路。</p><p>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，<br>当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><h4 id="熔断器（CircuitBreaker）"><a href="#熔断器（CircuitBreaker）" class="headerlink" title="熔断器（CircuitBreaker）"></a>熔断器（CircuitBreaker）</h4><p>熔断器的原理很简单，如同电力过载保护器。它可以实现快速失败，如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。熔断器也可以使应用程序能够诊断错误是否已经修正，如果已经修正，应用程序会再次尝试调用操作。熔断器就是保护服务高可用的最后一道防线。 </p><p>熔断器模式就像是那些容易导致错误的操作的一种代理。这种代理能够记录最近调用发生错误的次数，然后决定使用允许操作继续，或者立即返回错误。 熔断器开关相互转换的逻辑如下图：</p><p><img src="http://favorites.ren/assets/images/2017/springcloud/hystrix-2.png" alt="img"></p><h4 id="项目中配置熔断器：Service里配置"><a href="#项目中配置熔断器：Service里配置" class="headerlink" title="项目中配置熔断器：Service里配置"></a>项目中配置熔断器：Service里配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//是否开启断路器</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//请求次数</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//时间窗口期</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//失败率达到多少触发断路器</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"******id 不能负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> serialNumber <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"调用成功，流水号: "</span> <span class="token operator">+</span> serialNumber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：多次请求错误，然后慢慢正确，发现刚开始不满足条件，就算是正确的访问地址也不能进行</p><hr><h5 id="涉及到断路器的三个重要参数：快照时间窗、请求总数阀值、错误百分比阀值。"><a href="#涉及到断路器的三个重要参数：快照时间窗、请求总数阀值、错误百分比阀值。" class="headerlink" title="涉及到断路器的三个重要参数：快照时间窗、请求总数阀值、错误百分比阀值。"></a>涉及到断路器的三个重要参数：快照时间窗、请求总数阀值、错误百分比阀值。</h5><p>1：快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，<code>默认为最近的10秒。</code></p><p>2：请求总数阀值：在快照时间窗内，必须满足请求总数阀值才有资格熔断。<code>默认为20次</code>，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。</p><p>3：错误百分比阀值：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，<code>在默认设定50%阀值情况下，这时候就会将断路器打开。</code></p><hr><p><strong>熔断器全配置</strong></p><pre class="line-numbers language-none"><code class="language-none">@HystrixCommand(fallbackMethod &#x3D; &quot;str_fallbackMethod&quot;,        groupKey &#x3D; &quot;strGroupCommand&quot;,        commandKey &#x3D; &quot;strCommand&quot;,        threadPoolKey &#x3D; &quot;strThreadPool&quot;,        commandProperties &#x3D; &#123;                &#x2F;&#x2F; 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离                @HystrixProperty(name &#x3D; &quot;execution.isolation.strategy&quot;, value &#x3D; &quot;THREAD&quot;),                &#x2F;&#x2F; 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数）                @HystrixProperty(name &#x3D; &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value &#x3D; &quot;10&quot;),                &#x2F;&#x2F; 配置命令执行的超时时间                @HystrixProperty(name &#x3D; &quot;execution.isolation.thread.timeoutinMilliseconds&quot;, value &#x3D; &quot;10&quot;),                &#x2F;&#x2F; 是否启用超时时间                @HystrixProperty(name &#x3D; &quot;execution.timeout.enabled&quot;, value &#x3D; &quot;true&quot;),                &#x2F;&#x2F; 执行超时的时候是否中断                @HystrixProperty(name &#x3D; &quot;execution.isolation.thread.interruptOnTimeout&quot;, value &#x3D; &quot;true&quot;),                &#x2F;&#x2F; 执行被取消的时候是否中断                @HystrixProperty(name &#x3D; &quot;execution.isolation.thread.interruptOnCancel&quot;, value &#x3D; &quot;true&quot;),                &#x2F;&#x2F; 允许回调方法执行的最大并发数                @HystrixProperty(name &#x3D; &quot;fallback.isolation.semaphore.maxConcurrentRequests&quot;, value &#x3D; &quot;10&quot;),                &#x2F;&#x2F; 服务降级是否启用，是否执行回调函数                @HystrixProperty(name &#x3D; &quot;fallback.enabled&quot;, value &#x3D; &quot;true&quot;),                &#x2F;&#x2F; 是否启用断路器                @HystrixProperty(name &#x3D; &quot;circuitBreaker.enabled&quot;, value &#x3D; &quot;true&quot;),                &#x2F;&#x2F; 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候，                &#x2F;&#x2F; 如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。                @HystrixProperty(name &#x3D; &quot;circuitBreaker.requestVolumeThreshold&quot;, value &#x3D; &quot;20&quot;),                &#x2F;&#x2F; 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过                &#x2F;&#x2F; circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50,                &#x2F;&#x2F; 就把断路器设置为 &quot;打开&quot; 状态，否则就设置为 &quot;关闭&quot; 状态。                @HystrixProperty(name &#x3D; &quot;circuitBreaker.errorThresholdPercentage&quot;, value &#x3D; &quot;50&quot;),                &#x2F;&#x2F; 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后，                &#x2F;&#x2F; 会将断路器置为 &quot;半开&quot; 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 &quot;打开&quot; 状态，                &#x2F;&#x2F; 如果成功就设置为 &quot;关闭&quot; 状态。                @HystrixProperty(name &#x3D; &quot;circuitBreaker.sleepWindowinMilliseconds&quot;, value &#x3D; &quot;5000&quot;),                &#x2F;&#x2F; 断路器强制打开                @HystrixProperty(name &#x3D; &quot;circuitBreaker.forceOpen&quot;, value &#x3D; &quot;false&quot;),                &#x2F;&#x2F; 断路器强制关闭                @HystrixProperty(name &#x3D; &quot;circuitBreaker.forceClosed&quot;, value &#x3D; &quot;false&quot;),                &#x2F;&#x2F; 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间                @HystrixProperty(name &#x3D; &quot;metrics.rollingStats.timeinMilliseconds&quot;, value &#x3D; &quot;10000&quot;),                &#x2F;&#x2F; 该属性用来设置滚动时间窗统计指标信息时划分&quot;桶&quot;的数量，断路器在收集指标信息的时候会根据                &#x2F;&#x2F; 设置的时间窗长度拆分成多个 &quot;桶&quot; 来累计各度量值，每个&quot;桶&quot;记录了一段时间内的采集指标。                &#x2F;&#x2F; 比如 10 秒内拆分成 10 个&quot;桶&quot;收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常                @HystrixProperty(name &#x3D; &quot;metrics.rollingStats.numBuckets&quot;, value &#x3D; &quot;10&quot;),                &#x2F;&#x2F; 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 false, 那么所有的概要统计都将返回 -1。                @HystrixProperty(name &#x3D; &quot;metrics.rollingPercentile.enabled&quot;, value &#x3D; &quot;false&quot;),                &#x2F;&#x2F; 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。                @HystrixProperty(name &#x3D; &quot;metrics.rollingPercentile.timeInMilliseconds&quot;, value &#x3D; &quot;60000&quot;),                &#x2F;&#x2F; 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。                @HystrixProperty(name &#x3D; &quot;metrics.rollingPercentile.numBuckets&quot;, value &#x3D; &quot;60000&quot;),                &#x2F;&#x2F; 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，                &#x2F;&#x2F; 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行，                &#x2F;&#x2F; 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。                @HystrixProperty(name &#x3D; &quot;metrics.rollingPercentile.bucketSize&quot;, value &#x3D; &quot;100&quot;),                &#x2F;&#x2F; 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。                @HystrixProperty(name &#x3D; &quot;metrics.healthSnapshot.intervalinMilliseconds&quot;, value &#x3D; &quot;500&quot;),                &#x2F;&#x2F; 是否开启请求缓存                @HystrixProperty(name &#x3D; &quot;requestCache.enabled&quot;, value &#x3D; &quot;true&quot;),                &#x2F;&#x2F; HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中                @HystrixProperty(name &#x3D; &quot;requestLog.enabled&quot;, value &#x3D; &quot;true&quot;),        &#125;,        threadPoolProperties &#x3D; &#123;                &#x2F;&#x2F; 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量                @HystrixProperty(name &#x3D; &quot;coreSize&quot;, value &#x3D; &quot;10&quot;),                &#x2F;&#x2F; 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列，                &#x2F;&#x2F; 否则将使用 LinkedBlockingQueue 实现的队列。                @HystrixProperty(name &#x3D; &quot;maxQueueSize&quot;, value &#x3D; &quot;-1&quot;),                &#x2F;&#x2F; 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。                &#x2F;&#x2F; 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue                &#x2F;&#x2F; 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。                @HystrixProperty(name &#x3D; &quot;queueSizeRejectionThreshold&quot;, value &#x3D; &quot;5&quot;),        &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EnableHystrix注解与-EnableCircuitBreaker的区别"><a href="#EnableHystrix注解与-EnableCircuitBreaker的区别" class="headerlink" title="@EnableHystrix注解与@EnableCircuitBreaker的区别"></a>@EnableHystrix注解与@EnableCircuitBreaker的区别</h4><p>这两个注解都是激活hystrix的功能，我们根据上面代码得出来结论，只需要在服务启动类加入@EnableHystrix注解即可，无须增加@EnableCircuitBreaker注解，本身@EnableHystrix注解已经涵盖了EnableCircuitBreaker的功能。</p><h3 id="3、Hystrix的服务监控-dashborad"><a href="#3、Hystrix的服务监控-dashborad" class="headerlink" title="3、Hystrix的服务监控 dashborad"></a>3、Hystrix的服务监控 dashborad</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server:  port: <span class="token number">9001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="主启动-1"><a href="#主启动-1" class="headerlink" title="主启动"></a>主启动</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span> <span class="token comment">//注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApp9001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="被监控的服务需要加入依赖"><a href="#被监控的服务需要加入依赖" class="headerlink" title="被监控的服务需要加入依赖"></a>被监控的服务需要加入依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- actuator监控信息完善 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输入地址：http-localhost-9001-hystrix-启动成功看到下图"><a href="#输入地址：http-localhost-9001-hystrix-启动成功看到下图" class="headerlink" title="输入地址：http://localhost:9001/hystrix ,启动成功看到下图"></a>输入地址：<code>http://localhost:9001/hystrix</code> ,启动成功看到下图</h5><p><img src="https://static01.imgkr.com/temp/68c00f0b2b7b4f60a05a61581924b3e9.png"></p><h5 id="在页面内输入被监控的服务地址：http-localhost-8001-hystrix-stream-如果出现下图"><a href="#在页面内输入被监控的服务地址：http-localhost-8001-hystrix-stream-如果出现下图" class="headerlink" title="在页面内输入被监控的服务地址：http://localhost:8001/hystrix.stream    如果出现下图"></a>在页面内输入被监控的服务地址：<code>http://localhost:8001/hystrix.stream</code>    如果出现下图</h5><p><img src="https://static01.imgkr.com/temp/e79de743740c45929268530a00ee71bf.png"></p><p>则需要在监控的服务项目里的主启动加入下面代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystrixMain8001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentHystrixMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑     * ServletRegistrationBean因为springboot的默认路径不是"/hystrix.stream"，     * 只要在自己的项目里配置上下面的servlet就可以了     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击Monitor Stream，如果页面一直Loading则需要请求一下8001的接口，直至出现下图则代表成功</p><p><img src="https://static01.imgkr.com/temp/86399d7e62314b6eab8a28ac9de5337d.png"></p><h5 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h5><p>实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。<br>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现<code>故障实例和高压力实例</code>。</p><p>曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务调用OpenFeign</title>
      <link href="2021/05/16/fu-wu-diao-yong-openfeign/"/>
      <url>2021/05/16/fu-wu-diao-yong-openfeign/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Github：<a href="https://github.com/spring-cloud/spring-cloud-openfeign">https://github.com/spring-cloud/spring-cloud-openfeign</a></p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign?"></a>什么是Feign?</h3><p>Feign是一个声明式的Web服务客户端，让编写Web服务客户端变得非常容易，只需<strong>创建一个接口并在接口上添加注解即可</strong></p><h3 id="Feign的作用？"><a href="#Feign的作用？" class="headerlink" title="Feign的作用？"></a>Feign的作用？</h3><p>Feign旨在使编写Java Http客户端变得更容易。<br>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><span id="more"></span><h3 id="Feign集成了Ribbon"><a href="#Feign集成了Ribbon" class="headerlink" title="Feign集成了Ribbon"></a>Feign集成了Ribbon</h3><p>利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用</p><h2 id="二、Feign和OpenFeign的区别？"><a href="#二、Feign和OpenFeign的区别？" class="headerlink" title="二、Feign和OpenFeign的区别？"></a>二、Feign和OpenFeign的区别？</h2><table><thead><tr><th>Feign</th><th>OpenFeign</th></tr></thead><tbody><tr><td>Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端。Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td><td>OpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr><tr><td>依赖：spring-cloud-starter-feign</td><td>依赖：spring-cloud-starter-openfeign</td></tr></tbody></table><h2 id="三、项目中集成OpenFeign"><a href="#三、项目中集成OpenFeign" class="headerlink" title="三、项目中集成OpenFeign"></a>三、项目中集成OpenFeign</h2><p>1、pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、主启动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFeignMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderFeignMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、新增Service 与要调用的服务器提供方路径和方法名保持一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/get/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">></span></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、OpenFeign的超时控制"><a href="#四、OpenFeign的超时控制" class="headerlink" title="四、OpenFeign的超时控制"></a>四、OpenFeign的超时控制</h2><p>使用@FeignClient调用接口默认等待1秒钟，但是服务端处理若是超过1秒钟，导致Feign客户端不想等待了，直接返回报错。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> servlet <span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span> in context <span class="token keyword">with</span> <span class="token namespace">path</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> threw exception <span class="token punctuation">[</span><span class="token class-name">Request</span> processing failed<span class="token punctuation">;</span> nested exception is <span class="token class-name"><span class="token namespace">feign<span class="token punctuation">.</span></span>RetryableException</span><span class="token operator">:</span> connect timed out executing GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>CLOUD<span class="token operator">-</span>PAYMENT<span class="token operator">-</span>SERVICE<span class="token operator">/</span>payment<span class="token operator">/</span>feign<span class="token operator">/</span>timeout<span class="token punctuation">]</span> <span class="token keyword">with</span> <span class="token namespace">root</span> cause<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketTimeoutException</span><span class="token operator">:</span> connect timed outat <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>DualStackPlainSocketImpl</span><span class="token punctuation">.</span><span class="token function">waitForConnect</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>na<span class="token operator">:</span><span class="token number">1.8</span><span class="token number">.0_201</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。yml文件中开启配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/<span class="token comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span><span class="token comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、OpenFeign日志功能"><a href="#五、OpenFeign日志功能" class="headerlink" title="五、OpenFeign日志功能"></a>五、OpenFeign日志功能</h2><p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。<br>说白了就是对Feign接口的调用情况进行监控和输出</p><p><strong>日志级别</strong></p><ul><li>NONE：默认的，不显示任何日志；</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间；</li><li>HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</li><li>FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><p><strong>集成到项目</strong></p><p>1、配置Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignLog</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#设置feign客户端超时时间</span><span class="token comment">#springCloud默认开启支持ribbon</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span><span class="token comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token comment"># feign日志以什么级别监控哪个接口</span>    <span class="token key atrule">com.wwl.springcloud.service.PaymentFeignService</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、后台查看日志</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> <span class="token punctuation">(</span><span class="token number">2320</span>ms<span class="token punctuation">)</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> connection<span class="token operator">:</span> keep<span class="token operator">-</span>alive<span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> content<span class="token operator">-</span>type<span class="token operator">:</span> application<span class="token operator">/</span>json<span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> date<span class="token operator">:</span> <span class="token class-name">Sun</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token class-name">May</span> <span class="token number">2021</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13</span> GMT<span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> keep<span class="token operator">-</span>alive<span class="token operator">:</span> timeout<span class="token operator">=</span><span class="token number">60</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> transfer<span class="token operator">-</span>encoding<span class="token operator">:</span> chunked<span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.905</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.907</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token operator">:</span><span class="token string">"查询成功\t 服务端口：8001"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"serial"</span><span class="token operator">:</span><span class="token string">"hkjhkj"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">13.907</span> DEBUG <span class="token number">16712</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>p<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">80</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>w<span class="token punctuation">.</span>s<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>PaymentFeignService</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">PaymentFeignService</span>#getPaymentById<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token class-name">END</span> HTTP <span class="token punctuation">(</span><span class="token number">93</span><span class="token operator">-</span><span class="token keyword">byte</span> body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFeign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务调用Ribbon</title>
      <link href="2021/05/15/fu-wu-diao-yong-ribbon/"/>
      <url>2021/05/15/fu-wu-diao-yong-ribbon/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://github.com/Netflix/ribbon">https://github.com/Netflix/ribbon</a></p></blockquote><blockquote><p>中文文档：<a href="http://docs.springcloud.cn/user-guide/ribbon/">http://docs.springcloud.cn/user-guide/ribbon/</a></p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="什么是Ribbon？"><a href="#什么是Ribbon？" class="headerlink" title="什么是Ribbon？"></a>什么是Ribbon？</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡</strong>的工具。</p><p>Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><h3 id="LB负载均衡-Load-Balance-是什么？"><a href="#LB负载均衡-Load-Balance-是什么？" class="headerlink" title="LB负载均衡(Load Balance)是什么？"></a>LB负载均衡(Load Balance)是什么？</h3><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。<br>常见的负载均衡有软件Nginx，LVS，硬件 F5等。</p><span id="more"></span><h3 id="Ribbon本地负载均衡客户端-VS-Nginx服务端负载均衡区别？"><a href="#Ribbon本地负载均衡客户端-VS-Nginx服务端负载均衡区别？" class="headerlink" title="Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别？"></a>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别？</h3><p> Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</p><p> Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p><h2 id="二、Ribbon的七种负载均衡策略"><a href="#二、Ribbon的七种负载均衡策略" class="headerlink" title="二、Ribbon的七种负载均衡策略"></a>二、Ribbon的七种负载均衡策略</h2><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>轮询策略</td></tr><tr><td>RandomRule</td><td>随机策略</td></tr><tr><td>BestAvailableRule</td><td>过滤出故障服务器后，选择一个并发量最小的</td></tr><tr><td>WeightedResponseTimeRule</td><td>针对响应时间加权轮询</td></tr><tr><td>AvailabilityFilteringRule</td><td>可用过滤策略，先过滤出故障的或并发请求大于阈值的一部分服务实例，然后再以线性轮询的方式从过滤后的实例清单中选出一个;</td></tr><tr><td>ZoneAvoidanceRule</td><td>从最佳区域实例集合中选择一个最优性能的服务实例</td></tr><tr><td>RetryRule</td><td>选择一个Server，如果失败，重新选择一个Server重试</td></tr></tbody></table><h2 id="三、一起使用Ribbon和Eureka"><a href="#三、一起使用Ribbon和Eureka" class="headerlink" title="三、一起使用Ribbon和Eureka"></a>三、一起使用Ribbon和Eureka</h2><h3 id="1、pom-xml引入Eureka时，包含了Ribbon的依赖"><a href="#1、pom-xml引入Eureka时，包含了Ribbon的依赖" class="headerlink" title="1、pom.xml引入Eureka时，包含了Ribbon的依赖"></a>1、pom.xml引入Eureka时，包含了Ribbon的依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://static01.imgkr.com/temp/04884a4201544954b85887fabcecbb94.png"></p><h3 id="2、配置RestTemplate"><a href="#2、配置RestTemplate" class="headerlink" title="2、配置RestTemplate"></a>2、配置RestTemplate</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、服务消费方"><a href="#3、服务消费方" class="headerlink" title="3、服务消费方"></a>3、服务消费方</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token class-name">PaymentSrv_URL</span> <span class="token operator">=</span> <span class="token string">"http://CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/get/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">PaymentSrv_URL</span> <span class="token operator">+</span> <span class="token string">"/payment/get/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、调用时，服务提供方的端口号交替出现则代表负载均衡配置成功"><a href="#4、调用时，服务提供方的端口号交替出现则代表负载均衡配置成功" class="headerlink" title="4、调用时，服务提供方的端口号交替出现则代表负载均衡配置成功"></a>4、调用时，服务提供方的端口号交替出现则代表负载均衡配置成功</h3><h2 id="四、项目中更换负载均衡策略"><a href="#四、项目中更换负载均衡策略" class="headerlink" title="四、项目中更换负载均衡策略"></a>四、项目中更换负载均衡策略</h2><h3 id="1、配置细节"><a href="#1、配置细节" class="headerlink" title="1、配置细节"></a>1、配置细节</h3><p>官方文档明确给出了警告：<br>这个自定义配置类不能放在@ComponentScan所扫描的当前包（@SpringBootApplication注解下的主启动类所在的包）下以及子包下，<br>否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。</p><h3 id="2、新增自定义规则类-实现负载均衡随机策略"><a href="#2、新增自定义规则类-实现负载均衡随机策略" class="headerlink" title="2、新增自定义规则类 实现负载均衡随机策略"></a>2、新增自定义规则类 实现负载均衡随机策略</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySelfRule</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义为随机</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、主启动类添加注解"><a href="#3、主启动类添加注解" class="headerlink" title="3、主启动类添加注解"></a>3、主启动类添加注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token comment">//在启动该微服务的时候就能去加载我们的自定义Ribbon配置类，从而使配置生效，</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">,</span>configuration<span class="token operator">=</span><span class="token class-name">MySelfRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMain80</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul简单使用</title>
      <link href="2021/05/13/consul-jian-dan-shi-yong/"/>
      <url>2021/05/13/consul-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>中文文档：<a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a></p></blockquote><blockquote><p>下载地址：<a href="https://www.consul.io/downloads">https://www.consul.io/downloads</a></p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Consul 是一套开源的分布式服务发现和配置管理系统，由 HashiCorp 公司用 Go 语言开发。</p><p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p><p>它具有很多优点。包括： 基于 raft 协议；比较简洁；支持健康检查；同时支持 <strong>HTTP</strong> 和 <strong>DNS</strong> 协议 ；支持跨数据中心的 <strong>WAN 集群</strong> ；提供<strong>图形界面</strong> ；跨平台，支持 Linux、Mac、Windows</p><span id="more"></span><h2 id="二、运行Consul"><a href="#二、运行Consul" class="headerlink" title="二、运行Consul"></a>二、运行Consul</h2><p>下载后只有一个.exe文件，双击即可启动</p><p>安装成功后，查看版本号 <code>consul --version</code></p><pre class="line-numbers language-none"><code class="language-none">E:\consul_1.9.5_windows_amd64&gt;consul --versionConsul v1.9.5Revision 3c1c22679Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol &gt;2 when speaking to compatible agents)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用开发者模式启动 <code>consul agent -dev</code></p><pre class="line-numbers language-none"><code class="language-none">E:\consul_1.9.5_windows_amd64&gt;consul agent -dev&#x3D;&#x3D;&gt; Starting Consul agent...           Version: &#39;1.9.5&#39;           Node ID: &#39;714bd79e-253d-46ae-f785-c28173dd0bf6&#39;         Node name: &#39;DESKTOP-PM0NM4F&#39;        Datacenter: &#39;dc1&#39; (Segment: &#39;&lt;all&gt;&#39;)            Server: true (Bootstrap: false)       Client Addr: [127.0.0.1] (HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600)      Cluster Addr: 127.0.0.1 (LAN: 8301, WAN: 8302)           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false, Auto-Encrypt-TLS: false&#x3D;&#x3D;&gt; Log data will now stream in as it occurs:.......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<code>http://localhost:8500</code> 看到下图代表启动成功</p><p><img src="https://static01.imgkr.com/temp/93ee014f4a73427f99a427a6af74502d.png"> </p><h2 id="三、部署到项目"><a href="#三、部署到项目" class="headerlink" title="三、部署到项目"></a>三、部署到项目</h2><p>1、pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## consul服务端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8006</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consul<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment  <span class="token comment">## consul注册中心地址</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">consul</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8500</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token comment">#hostname: 127.0.0.1</span>        <span class="token key atrule">service-name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>spring.application.name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、Main.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span>   <span class="token comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8004</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、启动项目，进入地址<code>http://localhost:8500</code>，看到下图即服务注册成功</p><p><img src="https://static01.imgkr.com/temp/5d5b04ca542c4b1db5eb54ab8ccf716c.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka注册中心</title>
      <link href="2021/05/07/eureka-zhu-ce-zhong-xin/"/>
      <url>2021/05/07/eureka-zhu-ce-zhong-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>中文版教程：<a href="https://www.springcloud.cc/spring-cloud-netflix.html">https://www.springcloud.cc/spring-cloud-netflix.html</a></p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>什么是Eureka？</strong></p><p>Eureka是springcloud中的一个负责<strong>服务注册和发现</strong>的组件。遵循着CPA理论中的A(可用性)，P(分区容错性)。</p><p>一个Eureka中分为<strong>eureka server</strong> 和<strong>eureka client</strong>。其中eureka是作为服务的注册和发现中心。eureka client 既可以作为服务的生产者，又可以作为服务的消费者。</p><p><strong>什么是服务注册与发现？</strong></p><span id="more"></span><p>Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到 Eureka Server并维持<strong>心跳连接</strong>。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。<br>在服务注册与发现中，有一个<strong>注册中心</strong>。当服务器启动的时候，会把当前自己服务器的信息 （比如 <strong>服务地址通讯地址</strong>等）以<strong>别名</strong>方式注册到注册中心上。另一方（消费者/服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p><h2 id="二、部署Eureka-Server"><a href="#二、部署Eureka-Server" class="headerlink" title="二、部署Eureka Server"></a>二、部署Eureka Server</h2><p>1、pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment">#eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#false表示不向注册中心注册自己。</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、Main.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">//代表是Eureka服务端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、启动项目测试，进入地址<code>http://localhost:7070</code>，看到下图即部署成功</p><p><img src="https://static01.imgkr.com/temp/bb601bf4299e412ca1b13f362cf12776.png"></p><p>No instances available 代表没有服务被发现</p><h2 id="三、部署Eureka-Client"><a href="#三、部署Eureka-Client" class="headerlink" title="三、部署Eureka Client"></a>三、部署Eureka Client</h2><p>1、pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#表示是否将自己注册进EurekaServer默认为true。</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#defaultZone: http://localhost:7001/eureka</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka  <span class="token comment"># 集群版</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> payment8001    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment">#访问路径可以显示IP地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、Main.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">//代表是Eureka客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、先启动Eureka Server项目，后启动Eureka Client。再次访问地址<code>http://localhost:7070</code> ，看到如图代表成功</p><p><img src="https://static01.imgkr.com/temp/78b8d030f0204c678a9c72d81c6a8121.png"></p><blockquote><p>Eureka 健康检查：<a href="http://localhost:8001/actuator/health">http://localhost:8001/actuator/health</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka配置登录验证</title>
      <link href="2021/05/07/eureka-pei-zhi-deng-lu-yan-zheng/"/>
      <url>2021/05/07/eureka-pei-zhi-deng-lu-yan-zheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、pom-xml引入依赖"><a href="#一、pom-xml引入依赖" class="headerlink" title="一、pom.xml引入依赖"></a>一、pom.xml引入依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--eureka server 的依赖,注意是server--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--和安全相关的依赖包,我们访问 eureka的需要密码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、application-yml中配置"><a href="#二、application-yml中配置" class="headerlink" title="二、application.yml中配置"></a>二、application.yml中配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20000</span> <span class="token comment">#程序运行的端口,可以自定义修改</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token comment">#配置 eureka 页面的登陆的账号和密码,需要配合security依赖使用</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> admin   <span class="token comment">#用户名可自行配置</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> admin123  <span class="token comment">#密码可自行配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment">#eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//admin<span class="token punctuation">:</span>admin123@localhost<span class="token punctuation">:</span>20000/eureka/ <span class="token comment">#我们的注册中心的地址</span>    <span class="token comment">#单机版的配置,集群只需要启动多个eureka并相互作为客户端配置其他eureka地址即可,为了方便演示,我们使用单机版</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、添加security安全配置类"><a href="#三、添加security安全配置类" class="headerlink" title="三、添加security安全配置类"></a>三、添加security安全配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//禁用掉 csrf 跨域攻击,以免我们的服务无法注册到 eureka</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需要认证所有的请求</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//符合以下路径规则的放行</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoringAntMatchers</span><span class="token punctuation">(</span><span class="token string">"/eureka/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://static01.imgkr.com/temp/6747e162b900440c8c9300e24a2e61a2.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 注册中心</title>
      <link href="2021/05/07/linux-an-zhuang-zookeeper/"/>
      <url>2021/05/07/linux-an-zhuang-zookeeper/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装前环境配置"><a href="#一、安装前环境配置" class="headerlink" title="一、安装前环境配置"></a>一、安装前环境配置</h3><p>ZooKeeper是用Java编写的，运行在Java环境上，因此，在部署zk的机器上需要安装Java运行环境。为了正常运行zk，我们需要JRE1.6或者以上的版本。 </p><h3 id="二、下载并解压Zookeeper"><a href="#二、下载并解压Zookeeper" class="headerlink" title="二、下载并解压Zookeeper"></a>二、下载并解压Zookeeper</h3><p>zookeeper下载链接：<a href="https://archive.apache.org/dist/zookeeper">https://archive.apache.org/dist/zookeeper</a></p><p>解压：<code>tar -zvxf zookeeper-3.4.13.tar.gz</code></p><h3 id="三、zookeeper配置"><a href="#三、zookeeper配置" class="headerlink" title="三、zookeeper配置"></a>三、zookeeper配置</h3><p>进入conf目录</p><span id="more"></span><pre class="line-numbers language-none"><code class="language-none">[root@localhost local]# cd zookeeper-3.4.13&#x2F;conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>zoo.cfg文件配置 <strong>不配置会报错</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost conf]# cp  zoo_sample.cfg  zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他配置</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost conf]# mkdir &#x2F;tmp&#x2F;zookeeper[root@localhost conf]# mkdir &#x2F;tmp&#x2F;zookeeper&#x2F;data[root@localhost conf]# mkdir &#x2F;tmp&#x2F;zookeeper&#x2F;log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper&#x2F;datadataLogDir&#x3D;&#x2F;tmp&#x2F;zookeeper&#x2F;logserver.1&#x3D;192.168.120.200:2888:3888#如果要配置集群server.2&#x3D;192.168.120.200:2888:3888server.3&#x3D;192.168.120.200:2888:3888....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境变量</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost zookeeper-3.4.13]# export ZOOKEEPER_INSTALL&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.13&#x2F;[root@localhost zookeeper-3.4.13]# export PATH&#x3D;$PATH:$ZOOKEEPER_INSTALL&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h3><p>启动zookeeper服务端，bin目录下</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost bin]# .&#x2F;zkServer.sh startZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper-3.4.11&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgStarting zookeeper ... STARTED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动zookeeper客户端，bin目录下</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost bin]# .&#x2F;zkCli.shConnecting to localhost:2181.....WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、项目集成zookeeper客户端"><a href="#五、项目集成zookeeper客户端" class="headerlink" title="五、项目集成zookeeper客户端"></a>五、项目集成zookeeper客户端</h3><p>1、pom.xml    <strong>注意jar包冲突</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- SpringBoot整合zookeeper客户端 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先排除自带的zookeeper3.5.3--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--添加zookeeper3.4.11版本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8004</span><span class="token comment">#服务别名----注册zookeeper到注册中心名称</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">zookeeper</span><span class="token punctuation">:</span>      <span class="token key atrule">connect-string</span><span class="token punctuation">:</span> 192.168.120.200<span class="token punctuation">:</span><span class="token number">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、Main.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8004</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8004</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、启动8004项目后，进入zkServer.sh查询注册的实例</p><pre class="line-numbers language-none"><code class="language-none">[zk: localhost:2181(CONNECTED) 4] ls &#x2F;services               [cloud-provider-payment][zk: localhost:2181(CONNECTED) 5] ls &#x2F;services&#x2F;cloud-provider-payment[fedd0ce2-45b6-49a3-a796-53b5b7571dc0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看到上面的实例名称，即代表注册到zookeeper服务端成功</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="2021/04/14/mysql-suo-yin/"/>
      <url>2021/04/14/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是索引？"><a href="#一、什么是索引？" class="headerlink" title="一、什么是索引？"></a>一、什么是索引？</h2><p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p><h2 id="二、索引的优缺点"><a href="#二、索引的优缺点" class="headerlink" title="二、索引的优缺点?"></a>二、索引的优缺点?</h2><p><strong>优点：</strong></p><p>1、索引可以大大提高MySQL的检索速度。</p><p>2、所有的MySql列类型(字段类型)都可以被索引，可以给任意字段设置索引 </p><span id="more"></span><p><strong>缺点：</strong></p><p>1、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件。<br>2、建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。<br>3、对于离散度较差的数据，为它建立索引就没有太大的实际效果。比如：性别字段<br>4、对于非常小的表，大部分情况下简单的全表扫描更高效。</p><h2 id="三、索引的分类"><a href="#三、索引的分类" class="headerlink" title="三、索引的分类"></a>三、索引的分类</h2><h4 id="按列来区分："><a href="#按列来区分：" class="headerlink" title="按列来区分："></a>按列来区分：</h4><p>索引分<strong>单列索引</strong>和<strong>复合索引</strong>。</p><p>单列索引：即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</p><p>复合索引：即一个索引包含多个列。</p><hr><p><strong>注1：复合索引有哪些好处？</strong></p><p><strong>减少开销：</strong>建一个复合索引 (Gid,Cid,SId) ，实际相当于建了 (Gid)、(Gid,Cid)、(Gid,Cid,SId) 三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用复合索引会大大的减少开销！ </p><p><strong>覆盖索引：</strong><code>select Gid,Cid,SId from student where Gid =1 and Cid =2</code>。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机IO操作。减少IO操作，特别的随机IO其实是DBA主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。 </p><p><strong>效率高：</strong>索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:<code>select from table where Gid =1 and Cid =2 and SId =3</code>,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W10%=100w条数据，然后再回表从100w条数据中找到符合<code> Gid =2 and Cid = 3</code>的数据，然后再排序，再分页；如果是复合索引，通过索引筛选出1000w10% 10% *10%=1w，效率提升可想而知！ </p><p><strong>缺点：</strong>复合索引越多，索引列越多，则创建的索引越多，索引都是存储在磁盘里的，通过索引算法 BTree代表索引算法使用二叉树的形式来做索引的)来查找数据，的确可以极大的提高查询效率，但是与此同时增删改的同时，需要更新索引，同样是需要花时间的，并且索引所占的磁盘空间也不小。 </p><p><strong>建议：</strong>单表尽可能不要超过一个复合索引，单列索引不超过3个</p><p><strong>注2：复合索引的注意事项</strong><br>1、<strong>最左前缀匹配原则：</strong> 非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、 like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会 帮你优化成索引可以识别的形式。 </p><hr><h4 id="按数据存储方式区分："><a href="#按数据存储方式区分：" class="headerlink" title="按数据存储方式区分："></a>按数据存储方式区分：</h4><p>索引分<strong>聚簇索引</strong>和<strong>非聚簇索引</strong></p><p>聚簇索引：聚簇索引就是按照每张表的主键构造一颗B+树 。 同时叶子节点中存放的就是整张表的行记录数据，也将聚集索引的叶子节点称为数据页。 这个特性决定了索引组织表中数据也是索引的一部分，每张表只能拥有一个聚簇索引。 </p><hr><p><strong>注</strong>：Innodb通过主键聚集数据，如果没有定义主键，innodb会选择非空的唯一索引代替。如果没有这样的索引，innodb会隐式的定义一个主键来作为聚簇索引。 </p><hr><p>非聚簇索引：聚簇索引之上创建的索引称之为非聚簇索引（也称为辅助索引）。辅助索引访问数据需要二次查找，辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据页（这个过程叫<strong>回表</strong>）</p><h4 id="按作用区分"><a href="#按作用区分" class="headerlink" title="按作用区分"></a>按作用区分</h4><p><strong>主键索引（primary key）：</strong>也简称主键，提供唯一性约束并不允许为空。一张表中只能有一个主键。被标记为自动增长的字段一定是主键，但主键不一定是自动增长。一般把主键定义在无意义的字段上（如：编号）</p><p><strong>普通索引（normal）：</strong>普通索引是最基本的索引，它没有任何限制，值可以为空，仅加速查询</p><p><strong>唯一索引（unique）：</strong> 唯一索引与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一 </p><p><strong>全文索引（fulltext）：</strong>全文索引主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎 </p><p><strong>空间索引（spatial）：</strong>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。这是在地理位置领域使用的一种索引，其他场景用的很少</p><h2 id="四、MySQL索引失效的几种情况"><a href="#四、MySQL索引失效的几种情况" class="headerlink" title="四、MySQL索引失效的几种情况"></a>四、MySQL索引失效的几种情况</h2><p>1、有or必全有索引;</p><p>2、复合索引未用左列字段; </p><p>3、like以%开头;</p><p>4、需要类型转换; </p><p>5、where中索引列有运算; </p><p>6、where中索引列使用了函数; </p><p>7、如果mysql觉得全表扫描更快时（数据少）; </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="2021/04/13/mysql-shi-wu/"/>
      <url>2021/04/13/mysql-shi-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>1、在MySQL中只有Innodb存储引擎的数据库才支持事务</p><p>2、事务处理可以用来维护数据的完整性，保证一组数据操作，要么全部成功，要么全部失败</p><p>3、事务主要用来管理insert，update，delete语句</p><span id="more"></span><h2 id="二、事务的基本要素（ACID）"><a href="#二、事务的基本要素（ACID）" class="headerlink" title="二、事务的基本要素（ACID）"></a>二、事务的基本要素（ACID）</h2><p>1、原子性（Atomicity）：事务开始后的所有操作，<strong>要么全部完成，要么全部失败</strong>,一旦在某个环节发生错误，之前执行的操作会被<strong>回滚</strong> （Rollback）到事务开始前的状态。</p><p>2、一致性（Consistency）：在事务开始之前和结束之后，数据库的完整性没有被破坏。<strong>比如A向B转账，不可能A扣了钱，B却没收到。</strong> </p><p>3、隔离性（Isolation）：同一时间，只允许一个事务请求同一条数据，不同的事务之前彼此没有任何干扰。</p><p>4、持久性（Durability）:事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚</p><h2 id="三、事务的实现原理"><a href="#三、事务的实现原理" class="headerlink" title="三、事务的实现原理"></a>三、事务的实现原理</h2><p>mysql没执行一条聚聚记录一条日志</p><p>1、start transaction，先记个日志，真正执行。</p><h2 id="四、事务的相关指令"><a href="#四、事务的相关指令" class="headerlink" title="四、事务的相关指令"></a>四、事务的相关指令</h2><p><strong>事务的开始</strong></p><p><code>begin</code>或<code>start trancaction</code>都是显式开启一个事务；</p><p><strong>事务的提交</strong></p><p><code>commit</code>或<code>commit work</code> 都是等价的</p><p><strong>事务回滚</strong></p><p><code>rollback</code>或<code>rollback word</code>也是等价的</p><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务 还可以用begin开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span> <span class="token comment"># 提交事务，代表事务结束。更新的数据保存到数据库</span>start transaction<span class="token punctuation">;</span> <span class="token comment">#开启事务</span>UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> UPDATE user <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">200</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> rollback<span class="token punctuation">;</span> <span class="token comment"># 事务回滚，上面更新的数据将被还原到执行前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、事务的并发问题"><a href="#五、事务的并发问题" class="headerlink" title="五、事务的并发问题"></a>五、事务的并发问题</h2><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p><strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><h2 id="六、事务的隔离级别"><a href="#六、事务的隔离级别" class="headerlink" title="六、事务的隔离级别"></a>六、事务的隔离级别</h2><p><strong>MySQL的默认隔离级别是可重复读</strong></p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（Read Uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（Read Committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（Repeatable Read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（Serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok的使用</title>
      <link href="2021/04/08/lombok-shi-yong/"/>
      <url>2021/04/08/lombok-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="1、-AllArgsConstructor"><a href="#1、-AllArgsConstructor" class="headerlink" title="1、@AllArgsConstructor"></a>1、@AllArgsConstructor</h4><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>使用后添加一个构造函数，该构造函数含有所有已声明字段属性参数。</p><p>生成全参构造函数。</p><span id="more"></span><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里注释这个注解就会报错</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、-Builder"><a href="#2、-Builder" class="headerlink" title="2、@Builder"></a>2、@Builder</h4><h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><p>生成静态Builder方法</p><p>在设计模式中的思想是：用一个内部类去实例化 一个对象，避免一个类出现过多构造函数</p><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、-Data"><a href="#3、-Data" class="headerlink" title="3、@Data"></a>3、@Data</h4><h5 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h5><p>集成：@Getter/@Setter，@ToString，@EqualsAndHashCode，@RequiredArgsConstructor。 </p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、-Accessors"><a href="#4、-Accessors" class="headerlink" title="4、@Accessors"></a>4、@Accessors</h4><h5 id="Accessors-chain-true"><a href="#Accessors-chain-true" class="headerlink" title="@Accessors(chain=true)"></a>@Accessors(chain=true)</h5><h6 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h6><p>链式访问，该注解设置chain=true，生成setter方法返回this（<strong>也就是返回的是对象</strong>），代替了默认的返回void。 </p><h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//开起chain=true后可以使用链式的set</span>        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"pollyduan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Accessors-fluent-true"><a href="#Accessors-fluent-true" class="headerlink" title="@Accessors(fluent=true)"></a>@Accessors(fluent=true)</h5><h6 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h6><p>在chain=true的基础上，getter和setter不带set和get前缀。</p><h6 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>fluent<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//fluent=true开启后默认chain=true，故这里也可以使用链式set</span>        <span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不需要写set</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Accessors-prefix-”f”"><a href="#Accessors-prefix-”f”" class="headerlink" title="@Accessors(prefix=”f”)"></a>@Accessors(prefix=”f”)</h5><h6 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h6><p>使用set方法忽略指定的前缀。不推荐这样去命名。 </p><h6 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"f"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注意方法名</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx修改配置文件不生效</title>
      <link href="2021/04/01/nginx-pei-zhi-conf-bu-sheng-xiao/"/>
      <url>2021/04/01/nginx-pei-zhi-conf-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<h4 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h4><p>cmd命令重新加载nginx，也没报错，但是配置文件就是没有生效</p><p><img src="https://static01.imgkr.com/temp/d5b9e5e1de27429abfa502f6a95bb9de.png"></p><h4 id="二、原因"><a href="#二、原因" class="headerlink" title="二、原因"></a>二、原因</h4><p>大概就是因为nginx重启失败，进程卡死导致出现多个，用reload命令或者stop都不行，需要杀死多余的进程</p><p><img src="https://img-blog.csdnimg.cn/20181108143010583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDk1Nzg2,size_16,color_FFFFFF,t_70"></p><h4 id="三、解决"><a href="#三、解决" class="headerlink" title="三、解决"></a>三、解决</h4><p>通过命令taskkill /F /IM  nginx.exe   强制关闭所有nginx进程，关闭后再次启动Nginx即可。</p><p><img src="https://static01.imgkr.com/temp/54de96596d58499793b125bee0d42ca0.png"></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays.asList()踩坑</title>
      <link href="2021/03/24/arrays.aslist-cai-keng/"/>
      <url>2021/03/24/arrays.aslist-cai-keng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p><strong>把数组转换成集合时,不能使用其修改集合相关的方法？</strong></p><p><strong>阿里巴巴java开发规范</strong>说到使用工具类Arrays.asList()方法把数组转换成集合时,不能使用其修改集合相关的方法,它的add/remove/clear方法会抛出UnsupportedOperationException() ，直接看代码</p><span id="more"></span><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> strs <span class="token operator">=</span> <span class="token string">"[1,2,3]"</span><span class="token punctuation">;</span><span class="token class-name">String</span> strip <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"strip = "</span> <span class="token operator">+</span> strip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> strip<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编译的情况下，List集合的add方法弹出警告，运行也真的报错了，情况如下</p><p><img src="https://static01.imgkr.com/temp/b8ab421e5c3243f7bb5d33938fdce7de.png"></p><h3 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h3><p>点击看报错的类，发现这个ArrayList并不是我们平时用的ArrayList.。而是Arrays里面的一个内部类.而且这个内部类没有add,clear,remove方法,所以抛出的异常其实来自于AbstractList. </p><pre class="line-numbers language-none"><code class="language-none">public abstract class AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements List&lt;E&gt; &#123;    &#x2F;**     * Sole constructor.  (For invocation by subclass constructors, typically     * implicit.)     *&#x2F;    protected AbstractList() &#123;    &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、解决"><a href="#三、解决" class="headerlink" title="三、解决"></a>三、解决</h3><p>其实很简单，用new ArrayList嵌套到外面就可以了，这时就是使用的我们平时的ArrayList，用add和remove方法也都不会报错了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//修改前</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改后</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis穿透、击穿和雪崩</title>
      <link href="2021/03/23/redis-huan-cun-chuan-tou-ji-chuan-he-xue-beng/"/>
      <url>2021/03/23/redis-huan-cun-chuan-tou-ji-chuan-he-xue-beng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、缓存穿透"><a href="#一、缓存穿透" class="headerlink" title="一、缓存穿透"></a>一、缓存穿透</h2><p><strong>缓存穿透是什么？</strong></p><p>如果每次都去查一个“缓存和数据库中都必不存在的数据（如id=-1的数据）”，因为缓存中不存在，那么每次请求都会打到DB上，从而导致缓存失去意义，在<strong>高并发</strong>的情况下就可能导致数据库崩溃，这就是缓存穿透。 </p><p><strong>缓存穿透的解决方案</strong></p><span id="more"></span><p>1、缓存空值</p><p>简单粗暴，如果查询DB返回的数据为空，我们仍然把这个空值放到Redis缓存中，只是将它的过期时间设置的很短，另外为了避免不必要的内存消耗，可以定期清理空值的key。 </p><p>2、限流</p><p>常见的限流算法有滑动窗口，令牌桶算法和漏桶算法，或 者直接使用队列、加锁等，在layering-cache里面可以使用分布式锁来做限流 </p><p>3、布隆过滤器</p><p>预先将所有缓存数据的key存放到布隆过滤器中，当一个查询请求过来的时候，先判断这个key在布隆过滤器中是否存在？</p><p>如果不存在，直接返回提示，都不用去查缓存更不用说DB了；</p><p>如果存在，则去查缓存，但我们知道布隆过滤器判断存在有一定的误判率，这里我是这样理解的，如果这个误判率针对你们的业务场景是可被接受的则可以忽略，另外我们在用Guava实现布隆过滤器的时候可以指定误判率不超过多少，你可以指定一个可被你接受的值。再或者，因为布隆过滤器可以过滤掉绝大多数的恶意key，针对少部分的漏网之鱼，我们可以在缓存层面使用功能上面说过的缓存空值或加锁的方案。</p><h2 id="二、缓存击穿"><a href="#二、缓存击穿" class="headerlink" title="二、缓存击穿"></a>二、缓存击穿</h2><p><strong>缓存击穿和缓存穿透不一样</strong></p><p>缓存击穿是指某个热点key在失效的瞬间（一般是缓存时间到期），持续的大并发请求穿破缓存，直接打到数据库，就像在一个屏障上凿开了一个洞，造成数据库压力瞬间增大，这就是缓存击穿。</p><p>热点key，某个访问非常频繁，访问量非常大的一个缓存key，我们叫做热点key。</p><p><strong>缓存击穿的解决方案</strong></p><p>1、设置热点key永不过期</p><p> 2、加锁，根据热点key从缓存中获取到的value为空时，先锁上，再去查DB将数据加载到缓存，若其它线程获取锁失败，则等待一段时间后重试，从而避免了大量请求直接打到DB。单机可以使用synchronized或ReentrantLock，分布式需要加分布式锁，如Redis分布式锁。【为了不阻塞对其他key的请求，此处可以用热点key来加锁】</p><h2 id="三、缓存雪崩"><a href="#三、缓存雪崩" class="headerlink" title="三、缓存雪崩"></a>三、缓存雪崩</h2><p>在高并发下，大量的缓存key在同一时间失效，导致大量的请求落到数据库上，如活动系统里面同时进行着非常多的活动，但是在某个时间点所有的活动缓存全部过期。如redis直接宕机。</p><p><strong>缓存雪崩的解决方案</strong></p><p>1、保证缓存层服务高可用性，如使用Redis Sentinel 和 Redis Cluster，双机房部署，保证Redis服务高可用。</p><p>2、通过设置不同的过期时间（随机数），来错开缓存过期，从而避免缓存集中失效。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群</title>
      <link href="2021/03/20/redis-ji-qun/"/>
      <url>2021/03/20/redis-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="简单的主从复制，读写分离"><a href="#简单的主从复制，读写分离" class="headerlink" title="简单的主从复制，读写分离"></a>简单的主从复制，读写分离</h2><h3 id="1、-概述"><a href="#1、-概述" class="headerlink" title="1、 概述"></a>1、 概述</h3><p>是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称 为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。 Master以写为主，Slave 以读为主。</p><p>这样的好处是当集群中的某一个节点故障时，不会影响处理客户端请求的能力</p><span id="more"></span><p><img src="https://static01.imgkr.com/temp/e32a8e7956e94996ab26384202c03d36.png"></p><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>启动时，服务器读取配置文件，并自动成为指定服务器的从服务器，从而构成主从复制的关系 。在主服务器开启IP绑定，在从服务器打开<code>redi.conf</code>文件，加入slaveof配置</p><ul><li>主服务器配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 <span class="token number">192.168</span>.1.8protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>从服务器配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slaveof <span class="token number">192.168</span>.0.1 <span class="token number">6379</span> masterauth zn123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://static01.imgkr.com/temp/aa885cad12a64bcb92acb1564861ab32.png"></p><p>将redis依次启动 ，先主后从</p><p>登录主redis客户端 ，看到connected_slaves:1就代表成功了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:1slave0:ip<span class="token operator">=</span><span class="token number">192.168</span>.1.8,port<span class="token operator">=</span><span class="token number">6379</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">13359</span>,lag<span class="token operator">=</span><span class="token number">1</span>master_repl_offset:13359repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:12030repl_backlog_histlen:1330<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向主服务器redis写入数据 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token builtin class-name">set</span> suceess <span class="token boolean">true</span>OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从服务器redis可读取数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get suceess<span class="token string">"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向从服务器写入数据失败，是因为从服务器默认配置slave-read-only yes，在redis.conf修改为no则可以向从Redis写数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> age <span class="token number">12</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can't <span class="token function">write</span> against a <span class="token builtin class-name">read</span> only replica.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="2021/03/19/redis-chi-jiu-hua/"/>
      <url>2021/03/19/redis-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p><strong>什么是持久化？</strong></p><p>redis的高性能很大程度上得益于所有的数据存储在了内存上，但是当redis重启后，所有存储在内存上的数据都会丢失，所以我们提供了两种把redis数据备份到硬盘上的方式，当redis重启后由硬盘上的数据恢复到redis的数据，这就是持久化的过程。</p><p><strong>不是所有的redis都要持久化</strong></p><p>某些情况我们只需要当做缓存使用就可以不持久化，比如当热点数据的缓存，session的共享等。 只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化 。</p><span id="more"></span><h2 id="二、持久化的两种方式"><a href="#二、持久化的两种方式" class="headerlink" title="二、持久化的两种方式"></a>二、持久化的两种方式</h2><h3 id="1、RDB-Redis-Database"><a href="#1、RDB-Redis-Database" class="headerlink" title="1、RDB (Redis Database)"></a>1、RDB (Redis Database)</h3><p>在指定的时间间隔内将内存中的数据集以快照（SnapShot）的方式写入磁盘，数据恢复是通过快照文件直接读到内存里。rdb保存的文件是dump.rdb</p><h4 id="a-触发机制"><a href="#a-触发机制" class="headerlink" title="a. 触发机制"></a>a. 触发机制</h4><p>redis.conf配置文件中有如下配置，用户可以更改。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#这三个条件是或的关系，分别表示</span><span class="token comment">#900秒内有1个或以上的键被改动</span>save <span class="token number">900</span> <span class="token number">1</span><span class="token comment">#300秒内有10条或以上的键被改动</span>save <span class="token number">300</span> <span class="token number">10</span><span class="token comment">#60秒内有10000条及以上键被改动时触发快照。</span>save <span class="token number">60</span> <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：当用户执行save和bgsave/lastsave命令以及fushall命令时，也会被动触发rdb</strong> </p><h4 id="b-恢复rdb文件"><a href="#b-恢复rdb文件" class="headerlink" title="b. 恢复rdb文件"></a>b. 恢复rdb文件</h4><p>1、只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中 的数据！</p><p> 2、查看需要存在的位置 </p><h4 id="c-优缺点"><a href="#c-优缺点" class="headerlink" title="c. 优缺点"></a>c. 优缺点</h4><p>优点： 1、适合大规模的数据恢复！ 2、对数据的完整性要不高！</p><p>缺点： 如果redis意外宕机了，这个最后一次修改数据就没有的了！只能保留到最后一个的save的地方。 </p><h3 id="AOF-apeend-only-file"><a href="#AOF-apeend-only-file" class="headerlink" title="AOF (apeend only file)"></a>AOF (apeend only file)</h3><p>AOF方式会将redis的每一条命令追加到硬盘文件中。简而言之就是记录日志</p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。aof保存的是appendonly.aof文件</p><p><strong>aof默认是关闭的,需要手动进行配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#redis.conf文件中</span>appendonly  <span class="token function">yes</span>        <span class="token comment">#开启aof持久化方式</span>appendfsync always     <span class="token comment">#每次有数据修改发生时都会写入AOF文件。</span>appendfsync everysec   <span class="token comment">#每秒钟同步一次，该策略为AOF的缺省策略</span>appendfsync no         <span class="token comment">#从不同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong>三种方案自由选择</p><p>1、每一次修改都同步，文件的完整会更加好！非常慢，也非常安全 。</p><p>2、每秒同步一次，足够快，并且在故障时只会丢失 1 秒钟的数据。（默认） </p><p>3、从不同步，将数据交给操作系统来处理。效率最高，但也最不安全的选择。 </p><p><strong>缺点：</strong></p><p>1、对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。 </p><p>2、aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化！</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务的传播机制</title>
      <link href="2021/03/15/spring-shi-wu-de-chuan-bo-ji-zhi/"/>
      <url>2021/03/15/spring-shi-wu-de-chuan-bo-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="传播机制："><a href="#传播机制：" class="headerlink" title="传播机制："></a>传播机制：</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>@Transactional(propagation=Propagation.REQUIRED)</td><td>如果有事务，那么加入事务,，没有的话新建一个(默认情况下)</td></tr><tr><td>@Transactional(propagation=Propagation.NOT_SUPPORTED)</td><td>容器不为这个方法开启事务</td></tr><tr><td>@Transactional(propagation=Propagation.REQUIRES_NEW)</td><td>不管是否存在事务，都创建一个新的事务。原来的挂起，新的执行完毕，继续执行老的事务</td></tr><tr><td>@Transactional(propagation=Propagation.MANDATORY)</td><td>必须在一个已有的事务中执行，否则抛出异常</td></tr><tr><td>@Transactional(propagation=Propagation.NEVER)</td><td>必须在一个没有的事务中执行，否则抛出异常(与Propagation.MANDATORY相反)</td></tr><tr><td>@Transactional(propagation=Propagation.SUPPORTS)</td><td>如果其他bean调用这个方法，在其他bean中声明事务，那就用事务。如果其他bean没有声明事务，那就不用事务</td></tr></tbody></table><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket配置与使用</title>
      <link href="2021/03/14/springboot-zheng-he-websocket/"/>
      <url>2021/03/14/springboot-zheng-he-websocket/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Websocket测试工具：<a href="http://www.jsons.cn/websocket/">http://www.jsons.cn/websocket/</a></p></blockquote><h3 id="一、基础概念以及实现需求"><a href="#一、基础概念以及实现需求" class="headerlink" title="一、基础概念以及实现需求"></a>一、基础概念以及实现需求</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p>Websocket它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。 </p><p>特点：</p><ul><li>建立在 TCP 协议之上，服务器端的实现比较容易。 </li><li>数据格式比较轻量，性能开销小，通信高效。 </li><li>协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。 </li><li><code> ws://example.com:80/path</code></li></ul><span id="more"></span><h4 id="2、需求"><a href="#2、需求" class="headerlink" title="2、需求"></a>2、需求</h4><p>这里实现了一个小程序搜索设备的功能。由客户端向服务器建立连接，在url上拼接参数token，服务端检验token的有效性，检验通过则成功建立连接。连接后，客户端发送一条json数据，服务端检验参数后，开始推送搜索到的设备数据。</p><h3 id="二、WebSocket配置与使用"><a href="#二、WebSocket配置与使用" class="headerlink" title="二、WebSocket配置与使用"></a>二、WebSocket配置与使用</h3><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、新建消息处理器：WebSocketServer"><a href="#2、新建消息处理器：WebSocketServer" class="headerlink" title="2、新建消息处理器：WebSocketServer"></a>2、新建消息处理器：WebSocketServer</h4><p>用处：接收来自客户端的请求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>websocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializerFeature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JWTUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JsonUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RequestUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parm<span class="token punctuation">.</span></span><span class="token class-name">YunHaiDeviceCallbackPARM</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IYunHaiCallbackService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">StringEscapeUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Lazy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">CloseStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">PongMessage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">TextMessage</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">WebSocketSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">TextWebSocketHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CopyOnWriteArraySet</span><span class="token punctuation">;</span><span class="token comment">/** * @Author: willivie * @Description: 消息处理器，用处接收来自客户端的请求 * 需要继承AbstractWebSocketHandler这个抽象类来实现自己的自定义消息处理器 * TextWebSocketHandler是用于处理文本消息处理器，也是AbstractWebSocketHandler的派生类 * 将WebSocketServer注册成spring的一个Bean * @Date: 2020/10/21 11:37 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Lazy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token keyword">extends</span> <span class="token class-name">TextWebSocketHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。     **/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketSession</span><span class="token punctuation">></span></span> webSocketSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">IYunHaiCallbackService</span> yunHaiCallbackService<span class="token punctuation">;</span>    <span class="token comment">/**     * 群发自定义消息     **/</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> co<span class="token punctuation">,</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"推送消息到窗口"</span> <span class="token operator">+</span> co <span class="token operator">+</span> <span class="token string">"，推送内容:"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里处理根据具体业务场景推送不同数据</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前webSocketSet容量:"</span><span class="token operator">+</span>webSocketSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> item <span class="token operator">:</span> webSocketSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> tokenTo <span class="token operator">=</span> <span class="token function">getWsSesionToken</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> coTo <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getCo</span><span class="token punctuation">(</span>tokenTo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> uidTo <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span>tokenTo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这里可以设定只推送给这个token的，为null则全部推送</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>co<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span>coTo<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"群体推送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>co<span class="token punctuation">,</span>coTo<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>uidTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"单人推送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 来自客户端的消息在此处理     **/</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleTextMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">TextMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"客户端消息: &#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> action <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"searchDevice"</span><span class="token operator">:</span>                    <span class="token class-name">String</span> devSn <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Integer</span> finish <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> co <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getCo</span><span class="token punctuation">(</span><span class="token function">getWsSesionToken</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>devSn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"搜索设备时，网关SN不能为空!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">YunHaiDeviceCallbackPARM</span> parm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YunHaiDeviceCallbackPARM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    parm<span class="token punctuation">.</span><span class="token function">setCo</span><span class="token punctuation">(</span>co<span class="token punctuation">)</span><span class="token punctuation">;</span>                    parm<span class="token punctuation">.</span><span class="token function">setSn</span><span class="token punctuation">(</span>devSn<span class="token punctuation">)</span><span class="token punctuation">;</span>                    parm<span class="token punctuation">.</span><span class="token function">setFinish</span><span class="token punctuation">(</span>finish<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> resp <span class="token operator">=</span> yunHaiCallbackService<span class="token punctuation">.</span><span class="token function">searchDevice</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"templatePush"</span><span class="token operator">:</span>                    <span class="token comment">//TODO 微信消息推送</span>                    <span class="token function">sendInfo</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"co"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>object<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"sid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"deviceWarning"</span><span class="token operator">:</span>                    <span class="token comment">//TODO 设备预警推送</span>                    <span class="token function">sendInfo</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"co"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"heartbeat"</span><span class="token operator">:</span>                    <span class="token comment">//心跳包，维持连接</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"action不符合规则!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JSONObject</span> data <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"json格式异常!"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JSONObject</span> data <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 消息推送     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">JSONObject</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> messageBack <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteMapNullValue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextMessage</span><span class="token punctuation">(</span>messageBack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"服务端推送数据 Data：&#123;&#125;"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 在连接断后后会调用该方法进行回收处理     **/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnectionClosed</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">CloseStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getWsSesionToken</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> co <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getCo</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 移除session</span>        webSocketSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"断开客户端连接:&#123;&#125;"</span><span class="token punctuation">,</span> co<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 在建立连接后调用此方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterConnectionEstablished</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getWsSesionToken</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        webSocketSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"有新窗口开始监听: &#123;&#125;,当前在线人数: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getCo</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">,</span> webSocketSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//JSONObject set = JsonUtils.set(1, "connection succeeded!", null);</span>        <span class="token comment">//String message = JSON.toJSONString(set, SerializerFeature.WriteMapNullValue);</span>        <span class="token comment">//session.sendMessage(new TextMessage(message));</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterConnectionEstablished</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取当前连接对象的参数值     *     * @param session 当前会话     * @return 参数值     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getWsSesionToken</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> parm <span class="token operator">=</span> <span class="token class-name">StringEscapeUtils</span><span class="token punctuation">.</span><span class="token function">unescapeHtml4</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token class-name">RequestUtils</span><span class="token punctuation">.</span><span class="token function">mapQueryString</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CustomHandshakeInterceptor</span><span class="token punctuation">.</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 当链接发生异常后触发的方法，关闭出错会话的连接，和删除在Map集合中的记录     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleTransportError</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断当前的链接是否在继续，关闭连接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        webSocketSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"连接出错,移除会话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handlePongMessage</span><span class="token punctuation">(</span><span class="token class-name">WebSocketSession</span> session<span class="token punctuation">,</span> <span class="token class-name">PongMessage</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handlePongMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、新建握手处理器：CustomHandshakeInterceptor"><a href="#3、新建握手处理器：CustomHandshakeInterceptor" class="headerlink" title="3、新建握手处理器：CustomHandshakeInterceptor"></a>3、新建握手处理器：CustomHandshakeInterceptor</h4><p>用处：握手前的调用，可在这里进行请求的校验工作（如权限的校验）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>websocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JWTUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">RequestUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">SneakyThrows</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">StringEscapeUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerHttpResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">HandshakeInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * @Author willivie * @Description: 握手处理器，用于客户端的握手请求 * 需要实现HandshakeInterceptor接口并注册层spring的一个Bean * @Date: 2020/11/4 10:25 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomHandshakeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandshakeInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> TOKEN <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 握手前的调用，可在这里进行请求的校验工作（如权限的校验）     **/</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">beforeHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> serverHttpRequest<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> serverHttpResponse<span class="token punctuation">,</span>                                   <span class="token class-name">WebSocketHandler</span> webSocketHandler<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> queryString <span class="token operator">=</span> <span class="token class-name">StringEscapeUtils</span><span class="token punctuation">.</span><span class="token function">unescapeHtml4</span><span class="token punctuation">(</span>serverHttpRequest<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> queryMap <span class="token operator">=</span> <span class="token class-name">RequestUtils</span><span class="token punctuation">.</span><span class="token function">mapQueryString</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>        queryMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ws连接参数："</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>TOKEN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> queryMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterHandshake</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> serverHttpRequest<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> serverHttpResponse<span class="token punctuation">,</span> <span class="token class-name">WebSocketHandler</span> webSocketHandler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 握手之后调用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、新建配置类：WebSocketConfiguration"><a href="#4、新建配置类：WebSocketConfiguration" class="headerlink" title="4、新建配置类：WebSocketConfiguration"></a>4、新建配置类：WebSocketConfiguration</h4><p>用处：注入消息处理器、拦截器，设置url路由</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fangzhizun<span class="token punctuation">.</span>websocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>istack<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span></span><span class="token class-name">TaskScheduler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketConfigurer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebSocketHandlerRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token comment">/** * @Author: willivie * @Description: * @Date: 2020/10/21 11:55 */</span> <span class="token comment">//注意注解EnableWebSocket</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSocket</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 注入握手拦截器     **/</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">CustomHandshakeInterceptor</span> customHandshakeInterceptor<span class="token punctuation">;</span>    <span class="token comment">/**     * 注入消息处理器     **/</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">WebSocketServer</span> webSocketServer<span class="token punctuation">;</span>    <span class="token comment">/**     * 注册webSocket处理器     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerWebSocketHandlers</span><span class="token punctuation">(</span><span class="token class-name">WebSocketHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 注册消息处理器，并使用 "/channel"作为处理器的标识，客户端连接路径使用"/channel"就把请求发送给指定的处理器</span>        registry<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>webSocketServer<span class="token punctuation">,</span> <span class="token string">"/channel"</span><span class="token punctuation">)</span>                <span class="token comment">// 允许跨域</span>                <span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment">// 注册拦截器</span>                <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span>customHandshakeInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 解决springboot + quartz + websocket (spring自带的websocket 模块)     * 引起的冲突问题     *     * @return TaskScheduler     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> <span class="token class-name">TaskScheduler</span> <span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskScheduler</span> threadPoolScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolScheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"SockJS-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolScheduler<span class="token punctuation">.</span><span class="token function">setRemoveOnCancelPolicy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> threadPoolScheduler<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、nginx配置反向代理"><a href="#5、nginx配置反向代理" class="headerlink" title="5、nginx配置反向代理"></a>5、nginx配置反向代理</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>wss<span class="token operator">/</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>socket<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意配置关键部分在于HTTP的请求中多了如下： </p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span><span class="token keyword">proxy_set_header</span> Connection <span class="token variable">$connection_upgrade</span><span class="token punctuation">;</span><span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>http1.1协议支持长连接，Upgrade和Connection这两个字段表示请求服务器升级协议为WebSocket。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos-7 安装mysql</title>
      <link href="2021/02/22/centos-7-an-zhuang-mysql/"/>
      <url>2021/02/22/centos-7-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="第一步、前往mysql官网下载所需的版本"><a href="#第一步、前往mysql官网下载所需的版本" class="headerlink" title="第一步、前往mysql官网下载所需的版本"></a>第一步、前往mysql官网下载所需的版本</h4><blockquote><p>Mysql5.7的rpm包的<a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-1.el7.x86_64.rpm-bundle.tar">下载地址</a> ，这里的版本是5.7.22</p></blockquote><p>下载完成后就上传的CentOS系统上。</p><h4 id="第二步、解压安装"><a href="#第二步、解压安装" class="headerlink" title="第二步、解压安装"></a>第二步、解压安装</h4><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//创建目录<span class="token builtin class-name">cd</span> /opt<span class="token function">mkdir</span> software<span class="token builtin class-name">cd</span> software<span class="token function">mkdir</span> mysql上传文件<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># tar -vxf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar　　//将解压的文件放到Mysql目录下</span><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y install make gcc-c++ cmake bison-devel ncurses-devel libaio libaio-devel net-tools　　//安装依赖包</span>由于CentOS7开始自带的数据库是mariadb，所以需要卸载系统中的mariadb组件，才能安装mysql的组件<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># rpm -qa | grep mariadb</span>mariadb-libs-5.5.60-1.el7_5.x86_64<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># yum -y remove mariadb-libs</span>　　现在开始安装mysql，由于依赖关系，所以顺序是固定的。　　//一个一个按顺序安装<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># rpm -ivh Mysql/mysql-community-common-5.7.16-1.el7.x86_64.rpm</span>警告：Mysql/mysql-community-common-5.7.16-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>正在升级/安装<span class="token punctuation">..</span>.   <span class="token number">1</span>:mysql-community-common-5.7.16-1.e<span class="token comment">################################# [100%]</span>   <span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm</span>警告：Mysql/mysql-community-libs-5.7.16-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>正在升级/安装<span class="token punctuation">..</span>.   <span class="token number">1</span>:mysql-community-libs-5.7.16-1.el7<span class="token comment">################################# [100%]</span>      <span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm</span>警告：Mysql/mysql-community-libs-compat-5.7.16-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中<span class="token punctuation">..</span>. <span class="token comment">################################# [100%]</span>正在升级/安装<span class="token punctuation">..</span>.<span class="token number">1</span>:mysql-community-libs-compat-5.7.1<span class="token comment">################################# [100%]</span><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># rpm -ivh /opt/software/mysql/mysql-community-client-5.7.27-1.el7.x86_64.rpm </span>警告：Mysql/mysql-community-client-5.7.16-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>正在升级/安装<span class="token punctuation">..</span>.   <span class="token number">1</span>:mysql-community-client-5.7.16-1.e<span class="token comment">################################# [100%]</span>   <span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm　　//之后安装就成功了</span>警告：Mysql/mysql-community-server-5.7.16-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中<span class="token punctuation">..</span>.                          <span class="token comment">################################# [100%]</span>正在升级/安装<span class="token punctuation">..</span>.   <span class="token number">1</span>:mysql-community-server-5.7.16-1.e<span class="token comment">################################# [100%]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里记录一下，我这里在第五步安装community-server时报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost software<span class="token punctuation">]</span><span class="token comment"># rpm -ivh mysql-community-server-5.7.22-1.el7.x86_64.rpm </span>警告：mysql-community-server-5.7.22-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：        /usr/bin/perl 被 mysql-community-server-5.7.22-1.el7.x86_64 需要        perl<span class="token punctuation">(</span>Getopt::Long<span class="token punctuation">)</span> 被 mysql-community-server-5.7.22-1.el7.x86_64 需要        perl<span class="token punctuation">(</span>strict<span class="token punctuation">)</span> 被 mysql-community-server-5.7.22-1.el7.x86_64 需要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题原因很简单：缺少perl.x86_64这个依赖，使用yum安装即可。 </p><p><code>yum -y install perl.x86_64</code></p><p>总之，仔细看报错信息！ </p><h4 id="第三步、启动mysql并设置开机自启"><a href="#第三步、启动mysql并设置开机自启" class="headerlink" title="第三步、启动mysql并设置开机自启"></a>第三步、启动mysql并设置开机自启</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl start mysqld</span><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable mysqld</span><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl status mysqld</span>● mysqld.service - MySQL Server   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/mysqld.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since 日 <span class="token number">2019</span>-06-02 <span class="token number">12</span>:11:34 CST<span class="token punctuation">;</span> 45s ago Main PID: <span class="token number">7840</span> <span class="token punctuation">(</span>mysqld<span class="token punctuation">)</span>   CGroup: /system.slice/mysqld.service           └─7840 /usr/sbin/mysqld --daemonize --pid-file<span class="token operator">=</span>/var/run/mysqld/mysqld.pid<span class="token number">6</span>月 02 <span class="token number">12</span>:11:26 youxi2 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting MySQL Server<span class="token punctuation">..</span>.<span class="token number">6</span>月 02 <span class="token number">12</span>:11:34 youxi2 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started MySQL Server.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第四步、获取mysql临时密码，设置mysql的root用户密码"><a href="#第四步、获取mysql临时密码，设置mysql的root用户密码" class="headerlink" title="第四步、获取mysql临时密码，设置mysql的root用户密码"></a>第四步、获取mysql临时密码，设置mysql的root用户密码</h4><h6 id="注意：5-6的密码使用-cat-root-mysql-secret-查询"><a href="#注意：5-6的密码使用-cat-root-mysql-secret-查询" class="headerlink" title="注意：5.6的密码使用 cat /root/.mysql_secret 查询"></a>注意：5.6的密码使用 cat /root/.mysql_secret 查询</h6><p>5.7版本看以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># grep "password" /var/log/mysqld.log　　//前往日志文件查找临时密码</span><span class="token number">2019</span>-06-02T04:11:28.935057Z <span class="token number">1</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: zS+u<span class="token operator">&amp;</span>ro49wbo别忘了。。记一下   _kizdUj_E77a<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p"zS+u&amp;ro49wbo"</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">2</span>Server version: <span class="token number">5.7</span>.16Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.//可以看到设置简单的密码是会报错的，因为密码有安全级别，具体原因看最后的扩展mysql<span class="token operator">></span> alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span>ERROR <span class="token number">1819</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Your password does not satisfy the current policy requirementsmysql<span class="token operator">></span> alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'root1234'</span><span class="token punctuation">;</span>ERROR <span class="token number">1819</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Your password does not satisfy the current policy requirementsmysql<span class="token operator">></span> alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'root1234ABC'</span><span class="token punctuation">;</span>ERROR <span class="token number">1819</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Your password does not satisfy the current policy requirementsmysql<span class="token operator">></span> alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'root1234ABCD!@#$'</span><span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">exit</span>Bye　　修改密码出来使用“alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'root1234ABCD!@#$'</span><span class="token punctuation">;</span>”，也可以使用“set password <span class="token keyword">for</span> root@localhost<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root1234ABCD!@#$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第五步、测试"><a href="#第五步、测试" class="headerlink" title="第五步、测试"></a>第五步、测试</h4><p>由于有特殊符号，必须用引号包裹密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -p'root1234ABCD!@#$'</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">3</span>Server version: <span class="token number">5.7</span>.16 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="扩展：如果想要设置简单密码概如何操作？"><a href="#扩展：如果想要设置简单密码概如何操作？" class="headerlink" title="扩展：如果想要设置简单密码概如何操作？"></a>扩展：如果想要设置简单密码概如何操作？</h4><p>有两种方法，一种在mysql里使用命令修改，一种直接修改配置文件。</p><h5 id="在mysql里使用命令修改的办法："><a href="#在mysql里使用命令修改的办法：" class="headerlink" title="在mysql里使用命令修改的办法："></a>在mysql里使用命令修改的办法：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># mysql -u root -p'root1234ABCD!@#$'</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">3</span>Server version: <span class="token number">5.7</span>.16 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> <span class="token keyword">select</span> @@validate_password_policy<span class="token punctuation">;</span>　　//这个参数是密码复杂程度+----------------------------+<span class="token operator">|</span> @@validate_password_policy <span class="token operator">|</span>+----------------------------+<span class="token operator">|</span> MEDIUM                     <span class="token operator">|</span>+----------------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> @@validate_password_length<span class="token punctuation">;</span>　　//这个参数是密码长度+----------------------------+<span class="token operator">|</span> @@validate_password_length <span class="token operator">|</span>+----------------------------+<span class="token operator">|</span>                          <span class="token number">8</span> <span class="token operator">|</span>+----------------------------+<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql密码简单就这两句命令mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_policy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>　　//global全局的Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_length</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> password <span class="token keyword">for</span> root@localhost<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>　　//刷新Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">exit</span>　　//退出Bye<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p1234</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor. Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">4</span>Server version: <span class="token number">5.7</span>.16 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><p>1.<code>validate_password_policy</code>复杂度级别：0表示密码达到长度即可；1表示密码需达到长度，还需有数字、大小写字母（可以单一可以混合）以及特殊字符；2表示密码需达到长度，还需数字、大小写字母（可以单一可以混合）以及特殊字符字典文件。MEDIUM是中等，也就是1。</p><p>2.<code>validate_password_length</code>其实是一个动态的值，它的最小值等于<code>validate_password_number_count</code>+<code>validate_password_special_char_count(2*validate_password_mixed_case_count)</code>，而这三个参数分别对应密码中数字、特殊字符、大小写字母的最小数量。我操作时设置了<code>validate_password_length=1</code>，实际再次读取<code>validate_password_length</code>的值是4。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select @@validate_password_length;+----------------------------+| @@validate_password_length |+----------------------------+|                          4 |+----------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="直接修改配置文件的办法："><a href="#直接修改配置文件的办法：" class="headerlink" title="直接修改配置文件的办法："></a>直接修改配置文件的办法：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/my.cnf</span>validate-password<span class="token operator">=</span>OFF　　//在<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>模块内添加，将validate_password插件关闭<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart mysqld　　//重启mysqld服务</span><span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p1234    </span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">2</span>Server version: <span class="token number">5.7</span>.16 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> <span class="token builtin class-name">set</span> password <span class="token keyword">for</span> root@localhost<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　//validate_password插件关闭后密码长度只需大于等于1即可，复杂度没有要求Query OK, <span class="token number">0</span> rows affected, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>　　//刷新Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">exit</span>　　//退出Bye<span class="token punctuation">[</span>root@youxi2 ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p1</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">3</span>Server version: <span class="token number">5.7</span>.16 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2016</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'<span class="token entity" title="\c">\c</span>'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：Mysql5.7是自带validate_password插件，关闭后对密码没有复杂度要求，只需密码长度大于等于1。</p><p>建议：/etc/my.cnf中将默认字符集设置为utf8，即添加一行character_set_server=utf8，然后重启mysqld</p><h4 id="修改远程访问权限"><a href="#修改远程访问权限" class="headerlink" title="修改远程访问权限"></a>修改远程访问权限</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> use mysql<span class="token punctuation">;</span>Reading table information <span class="token keyword">for</span> completion of table and <span class="token function">column</span> namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span> <span class="token keyword">select</span> host,user from user<span class="token punctuation">;</span>+-----------+---------------+<span class="token operator">|</span> <span class="token function">host</span>      <span class="token operator">|</span> user          <span class="token operator">|</span>+-----------+---------------+<span class="token operator">|</span> localhost <span class="token operator">|</span> mysql.session <span class="token operator">|</span><span class="token operator">|</span> localhost <span class="token operator">|</span> mysql.sys     <span class="token operator">|</span><span class="token operator">|</span> localhost <span class="token operator">|</span> root          <span class="token operator">|</span>+-----------+---------------+<span class="token number">3</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>Query OK, <span class="token number">1</span> row affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>Rows matched: <span class="token number">1</span>  Changed: <span class="token number">1</span>  Warnings: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token builtin class-name">exit</span>//重启mysql服务systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis五种数据类型</title>
      <link href="2021/02/15/redis-wu-chong-shu-ju-lei-xing/"/>
      <url>2021/02/15/redis-wu-chong-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis的优势之一就是拥有丰富的数据类型，不同的业务场景可以选择最合适的数据类型存储数据。Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。 </p></blockquote><blockquote><p>具体指令可通过 help @string/list/set/hash 查看</p></blockquote><blockquote><p>查看key是哪种类型 type key</p></blockquote><h3 id="1、String-字符串"><a href="#1、String-字符串" class="headerlink" title="1、String  (字符串)"></a>1、String  (字符串)</h3><ul><li>string是redis最基本的类型 ,数据格式为key-value格式。</li><li>string类型可以存储任何数据，应用场景多，需要注意的是，单个key的数据大小不能太大，一般存数据很小的值。</li><li>string类型单个key的值最大能存储512MB数据。 </li></ul><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置键值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name WillivieOK<span class="token comment"># 根据键获取值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name<span class="token string">"Willivie"</span><span class="token comment"># 获取值的长度</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> strlen name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token comment"># 拼接字符串</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> append name ,Grant<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">14</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name<span class="token string">"Willivie,Grant"</span><span class="token comment"># 设置时间 set key value EX timeout(秒)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> lan Java EX <span class="token number">30</span>OK<span class="token comment"># 查看过期时间：ttl key</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl lan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">25</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl lan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">22</span><span class="token comment"># 已设置值，追加过期时间：expire key timeout(秒)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> expire lan <span class="token number">20</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl lan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">16</span><span class="token comment"># 如果不存在则创建</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx <span class="token function">sort</span> desc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get <span class="token function">sort</span><span class="token string">"desc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx <span class="token function">sort</span> asc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get <span class="token function">sort</span><span class="token string">"desc"</span><span class="token comment"># 同时设置多个值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mset k1 v1 k2 v2 k3 v3OK<span class="token comment"># 查看所有key</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token comment"># 同时获取多个值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mget k1 k2 k3<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、List-（列表）"><a href="#2、List-（列表）" class="headerlink" title="2、List （列表）"></a>2、List （列表）</h3><ul><li>List类型是一个链表结构的集合 ，其主要功能有push,pop,range等</li><li>List类型是一个双端链表，可以通过相关的操作集合的头部或者尾部添加和删除元素 </li><li>list主要应用在跟顺序相关的业务中，例如最新消息排行榜，消息队列等。 </li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 赋值</span><span class="token comment">#  lpush key value ：将一个值插入到列表的头部（最左边）</span><span class="token comment">#  rpush key value ：将一个值插入到列表的尾部（最右边）</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush device socket<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 取值</span><span class="token comment"># llen key :获取列表的长度</span><span class="token comment"># lindex key index 通过索引获取列表的元素</span><span class="token comment"># lrange key start end 获取指定范围的元素</span><span class="token comment"># start和end代表列表的两个元素下标，获取下标范围内的元素（包括下标）</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange device <span class="token number">0</span> <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"light"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"switch"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"socket"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Set-（集合）"><a href="#3、Set-（集合）" class="headerlink" title="3、Set （集合）"></a>3、Set （集合）</h3><ul><li><p>set中的值是不能重读的！ </p></li><li><p>Redis的set集合是无序不可重复的 </p></li><li><p>集合最大的优势在于可以进行交集并集差集操作 </p></li><li><p>set类型根据其集合属性，可以用在，例如关注粉丝业务(判断是否已关注被被关在)，交集查找共同好友，唯一性可以统计访问网站的所有独立IP等。 </p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 赋值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd numO <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token punctuation">(</span><span class="token number">1</span>.68s<span class="token punctuation">)</span><span class="token comment"># 取值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers numO<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd numT <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token comment"># siff A B 取集合A的差集</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">sdiff</span> numO numT<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token comment"># 并集</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sunion key1 key2 <span class="token comment"># 返回集合的元素个数</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> scard numO<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token comment"># sinter A B 取A和B的交集</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sinter numO numT<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token comment"># 判断一个元素是否存在，1存在/0不存在</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sismember numO <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># spop key cuont 随机返回并删除集合内count个元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> spop numO <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token comment"># 取set的所有值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers numO<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Hash（哈希）"><a href="#4、Hash（哈希）" class="headerlink" title="4、Hash（哈希）"></a>4、Hash（哈希）</h3><ul><li>hash 是一个 string 类型的key-map! 这个值是一个map集合 </li><li>hash 特别适合用于存储对象，例如用户基本信息等  </li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 赋值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset user name willivie<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset user age <span class="token number">20</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset user sex boy<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 取值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget user age<span class="token string">"20"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset user star <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 给map的某个value值自增1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hincrby user star <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget user star<span class="token string">"2"</span><span class="token comment"># 批量赋值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hmset user age <span class="token number">18</span> name grantOK<span class="token comment"># 批量取值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hmget user age name<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"18"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"grant"</span><span class="token comment"># 获取map的所有key</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hkeys user<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"sex"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"star"</span><span class="token comment"># 获取map所有value</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hvals user<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"grant"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"18"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"boy"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、ZSet-（有序集合）"><a href="#5、ZSet-（有序集合）" class="headerlink" title="5、ZSet （有序集合）"></a>5、ZSet （有序集合）</h3><ul><li>使用<code>help @sorted_set</code>查看相关指令</li><li>zet里元素是有顺序，不能重复的。索引为唯一的，数据却可以重复 </li><li>zset类型主要利用有序和不重复性，例如排序存储班级成绩表，工资表；排行榜应用实现，取Top N </li><li>在set的基础上，增加了一个值。<code>set k1 v1 ； zset k1 score1 v1  </code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 赋值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd <span class="token builtin class-name">type</span> <span class="token number">9</span> int <span class="token number">3</span> char <span class="token number">5</span> bool<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd <span class="token builtin class-name">type</span> <span class="token number">6</span> double<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 取所有值 0 -1代表第一个和最后一个</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange <span class="token builtin class-name">type</span> <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"char"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"bool"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"double"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"int"</span><span class="token comment"># 根据score排序 显示全部的元素 从小到大！</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrangebyscore <span class="token builtin class-name">type</span> -inf +inf<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"char"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"bool"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"double"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"int"</span><span class="token comment"># 从大到进行排序！</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrevrange <span class="token builtin class-name">type</span> <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"int"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"double"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"bool"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"char"</span><span class="token comment"># 显示全部的元素和score 从小到大</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrangebyscore <span class="token builtin class-name">type</span> -inf +inf withscores<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"char"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"bool"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"double"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"7"</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"int"</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"9"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Redis中，下列三种数据类型的区别</p></blockquote><table><thead><tr><th align="center">数据结构</th><th align="center">是否可重复</th><th align="center">是否有序</th><th align="center">应用场景</th></tr></thead><tbody><tr><td align="center">List</td><td align="center">是</td><td align="center">是</td><td align="center">时间轴、队列</td></tr><tr><td align="center">Set</td><td align="center">否</td><td align="center">否</td><td align="center">标签、社交</td></tr><tr><td align="center">ZSet</td><td align="center">否</td><td align="center">是</td><td align="center">排行榜</td></tr></tbody></table><blockquote><p>工具类封装：<a href="https://blog.csdn.net/qq_41088297/article/details/109222157">https://blog.csdn.net/qq_41088297/article/details/109222157</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装</title>
      <link href="2021/02/15/redis-an-zhuang/"/>
      <url>2021/02/15/redis-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下安装Redis"><a href="#Linux下安装Redis" class="headerlink" title="Linux下安装Redis"></a>Linux下安装Redis</h2><h3 id="1、安装编译环境"><a href="#1、安装编译环境" class="headerlink" title="1、安装编译环境"></a>1、安装编译环境</h3><p><code>yum install gcc-c++</code> </p><h3 id="2、下载redis安装包"><a href="#2、下载redis安装包" class="headerlink" title="2、下载redis安装包"></a>2、下载redis安装包</h3><p>链接：<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a><br>下载后解压缩<br><code>tar -xzvf redis-5.0.5.tar.gz  </code></p><span id="more"></span><p><img src="https://static01.imgkr.com/temp/438306a6f02f467eab92459d77eb9bfb.png"></p><h3 id="3、make"><a href="#3、make" class="headerlink" title="3、make"></a>3、make</h3><p>这里可以直接make 是因为redis已经自己写好了make fifile 了,也就是说不用再执行confifigure 了<br>make 后编译好的文件会保存到src目录下<br><code>make &amp; make install</code></p><h3 id="4、修改环境变量"><a href="#4、修改环境变量" class="headerlink" title="4、修改环境变量"></a>4、修改环境变量</h3><p><code>export PATH=/usr/local/redis/bin:$PATH </code></p><h3 id="5、使用vi-修改redis-conf"><a href="#5、使用vi-修改redis-conf" class="headerlink" title="5、使用vi 修改redis.conf"></a>5、使用vi 修改redis.conf</h3><p>把daemonize no 变成daemonize yes 这样就可以让redis服务端后台启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">protected-mode no <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0 <span class="token comment"># 后台 </span>daemonize <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、启动redis服务端"><a href="#6、启动redis服务端" class="headerlink" title="6、启动redis服务端"></a>6、启动redis服务端</h3><p><code>./redis-server redis.conf</code></p><p>检查一下是否启动成功，这里看的6379即代表启动成功</p><p><img src="https://static01.imgkr.com/temp/91aa7feef9584fdb801e4371c3b9a502.png"></p><h3 id="7、启动客户端"><a href="#7、启动客户端" class="headerlink" title="7、启动客户端"></a>7、启动客户端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cliredis-cli --raw <span class="token comment"># 解决中文乱码问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2021/01/08/linux-chang-yong-ming-ling/"/>
      <url>2021/01/08/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Linux目录结构"><a href="#一、Linux目录结构" class="headerlink" title="一、Linux目录结构"></a>一、Linux目录结构</h2><blockquote><p>linux的文件系统时才用阶层式的树状目录结构，在此结构中最上层是根目录”/“，然后在此目录下再创建其他的目录。</p></blockquote><ul><li>/    根目录</li><li><code>root</code>  存放root用户的相关文件</li><li><code>home</code>  存放普通用户的相关文件</li><li><code>bin</code>  存放常用命令的目录，如：vi，su</li><li><code>sbin</code> 存放的是系统管理命令，需要一定的权限才能使用</li><li><code>mnt</code> 默认挂载光驱和软驱的目录</li><li><code>etc</code> 存放配置的相关文件<span id="more"></span></li><li><code>var</code> 存放经常变化的文件，如网络连接的socket 、日志等</li><li><code>usr </code>安装一个软件的默认目录，相当于windows下promgram fiels</li><li><code>proc</code>  这个目录是一个虚拟的目录，他是系统内存的映射，访问这个目录来获取系统信息</li><li><code>srv</code>  service 的缩写。该目录存放的是一些服务启动之后需要提取的数据</li><li><code>sys</code> 这是Linux2.6内核中新出现的一个文件系统</li><li><code>tmp</code>  这个目录存放的是一些临时文件</li><li><code>del</code> 类似windows的设备管理器，把所有的硬件用文件的形式存储</li><li><code>media</code>  系统提供该目录是为了让用户临时挂载别的文件系统</li><li><code>opt</code>  这个是给主机额外安装软件所摆放的</li><li><code>selinux</code>  这是一种安全子系统，它能控制程序只能访问特定文件</li></ul><p>简单示例图如下：</p><p><img src="https://s3.ax1x.com/2021/02/20/yIS2Oe.jpg"></p><h2 id="二、Linux命令"><a href="#二、Linux命令" class="headerlink" title="二、Linux命令"></a>二、Linux命令</h2><blockquote><p>目录相关命令</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span>  <span class="token comment"># 显示当前工作目录的绝对路径</span>-----------------------<span class="token function">ls</span>    <span class="token comment"># 列车目录下的文件</span><span class="token function">ls</span> -a<span class="token punctuation">(</span>--all<span class="token punctuation">)</span> <span class="token comment"># 显示全部文件，包括隐藏文件（以.开头的文件）</span><span class="token function">ls</span> -l <span class="token comment"># 简版：ll 以列表的形式显示文件详情，每列列出的信息依次为：文件类型与权限、链接数、文件属性，文件属组、文件大小(byte)、创建或修改时间、名字</span>-----------------------<span class="token builtin class-name">cd</span> /etc <span class="token comment"># 切换到etc目录</span><span class="token builtin class-name">cd</span> - <span class="token comment"># 返回上一次所在的目录</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span> <span class="token comment"># 返回当前目录的上一级目录</span><span class="token punctuation">..</span>/ <span class="token comment"># 上一级目录</span>./   <span class="token comment"># 当前目录</span>~  <span class="token comment"># 用户的home家目录</span>-----------------------<span class="token function">mkdir</span> <span class="token builtin class-name">test</span> <span class="token comment"># 创建名为test的目录</span><span class="token function">mkdir</span> -p test/vedio <span class="token comment"># 创建多层目录</span>------------------------<span class="token function">rmdir</span> <span class="token builtin class-name">test</span> <span class="token comment"># 删除名为test的目录</span><span class="token function">rmdir</span> -p test/vedio <span class="token comment"># 删除多层目录</span>-------------------------<span class="token function">cp</span> a.txt b.txt <span class="token comment"># 复制文件a并重命名为b</span><span class="token function">cp</span> -r temp temp2 <span class="token comment"># 递归复制整个文件</span>-------------------------<span class="token function">mv</span> a.txt temp/a.txt <span class="token comment"># 移动文件到temp目录</span><span class="token function">mv</span> a.txt b.txt <span class="token comment"># 给a文件重命名为b</span>--------------------------<span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件 <span class="token comment">#  选项：-f force强制执行；-r：recursive 递归执行</span><span class="token function">rm</span> -rf temp/ <span class="token comment"># 递归删除temp目录及其下所有内容</span>--------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>文件相关命令</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> a.txt <span class="token comment"># 创建a文件</span><span class="token builtin class-name">echo</span> hello <span class="token comment"># 输出字符串或者变量</span>-----------------------------------------<span class="token function">cat</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件名 <span class="token comment"># 查看文件内容，从第一行开始显示</span> -A：<span class="token comment"># 列出特殊字符而非空白</span> -b：<span class="token comment"># 列出行号，空白行不算行号</span> -n：<span class="token comment"># 列出行号，空白行也会有行号</span> -v：<span class="token comment"># 列出一些看不出来的特殊字符</span> ----------------------------------------- <span class="token function">more</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件 <span class="token comment"># 查看文件内容，一页一页的显示</span> 空格键（space）：<span class="token comment"># 向下翻一页</span> enter  ：<span class="token comment"># 向下翻一行</span> q  ：<span class="token comment"># 退出more，不在显示文件内容</span> ctrl+f  ：<span class="token comment"># 向下滚动一屏</span> ctrl+b  ：<span class="token comment"># 返回上一屏</span> <span class="token operator">=</span>  ：<span class="token comment"># 输出当前行的行号</span> :f  ：<span class="token comment"># 输出文件名和当前行号</span> ----------------------------------------- <span class="token function">head</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件  <span class="token comment">#  查看文件内容，只看头几行</span> <span class="token function">head</span> -n <span class="token number">2</span> test.txt <span class="token comment"># 查询test文件的头两行内容</span> ----------------------------------------- <span class="token function">tail</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件 <span class="token comment"># 查看文件内容，只查看文件末尾几行</span> -n：<span class="token comment"># 末尾几行</span> -f：<span class="token comment"># follow输出文件修改的内容，用于追踪文件修改</span> ----------------------------------------- <span class="token function">wc</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文本 <span class="token comment"># 统计指定文本的行数、字数、字节数</span>选项： -l：<span class="token comment"># lines显示行数</span> -w：<span class="token comment"># 显示单词数</span> -c：<span class="token comment"># 显示字节数</span> ----------------------------------------- <span class="token function">stat</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件 <span class="token comment"># 查看文件的具体存储信息和时间等信息</span> <span class="token function">file</span> 文件名 <span class="token comment"># 查看文件类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot数据传输加密</title>
      <link href="2020/10/29/springboot-shu-ju-chuan-shu-jia-mi/"/>
      <url>2020/10/29/springboot-shu-ju-chuan-shu-jia-mi/</url>
      
        <content type="html"><![CDATA[<h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.cxytiandi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>monkey-api-encrypt-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动类加注解-EnableEncrypt"><a href="#启动类加注解-EnableEncrypt" class="headerlink" title="启动类加注解 EnableEncrypt"></a>启动类加注解 EnableEncrypt</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableEncrypt</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">SecurityAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="增加加密的key配置："><a href="#增加加密的key配置：" class="headerlink" title="增加加密的key配置："></a>增加加密的key配置：</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">encrypt</span><span class="token punctuation">:</span><span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token important">*************</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>spring.encrypt.key：加密key，必须是16位</li><li>spring.encrypt.debug：是否开启调试模式,默认为false,如果为true则不启用加解密操作<br><strong>注意</strong>：dev配置文件为ture，prod配置文件为false。这样本地就不会开启，调式的时候不会启用加解密，线上启用就可以了。</li></ul><hr><p> <strong>备注1</strong> </p><ul><li>到这一步已经开启了加解密全局配置，默认所有接口都会对接口请求和响应数据进行加解密</li><li>如果在某个方法上使用Decrypt和Encrypt注解，则是只有使用了注解的方法会加解密</li></ul><h3 id="基于注解来做控制：-Decrypt-Encrypt"><a href="#基于注解来做控制：-Decrypt-Encrypt" class="headerlink" title="基于注解来做控制：@Decrypt @Encrypt"></a>基于注解来做控制：@Decrypt @Encrypt</h3><p>使用这两个注解后，全局加解密就失效了<br>@Encrypt 对响应数据进行加密操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试"</span><span class="token punctuation">,</span> response <span class="token operator">=</span> <span class="token class-name">PopTmpDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/all"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Encrypt</span>   <span class="token keyword">public</span> <span class="token class-name">ApiResponses</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">PopTmpDTO</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PopTmpDTO</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> popTmpService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e<span class="token operator">-></span>e<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">PopTmpDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Decrypt 对请求数据进行解密操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试2"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"willivie 2019-12-29：新增接口&lt;br />"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Decrypt</span>    <span class="token annotation punctuation">@Encrypt</span>    <span class="token keyword">public</span> <span class="token class-name">ApiResponses</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PopTmpPARM</span><span class="token punctuation">></span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span>           <span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">PopTmpPARM<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">PopTmpPARM</span> popTmpPARM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        popTmpPARM<span class="token punctuation">.</span><span class="token function">setPopName</span><span class="token punctuation">(</span><span class="token string">"改变测试！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>popTmpPARM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>备注2</strong> </p><ul><li>注意：加了Encrypt和Decrypt注解后，类似GetMapping注解一点要在后面加路径，比如@GetMapping → @GetMapping（”/list”)，不然会报错!如果默认全局加解密的情况则不会出现这种情况</li></ul><p>###默认开启全部加解密功能，如果想要忽略某些接口怎么办？<br>配置方式可以使用下面的方式进行忽略：<br>方法①：在application配置中加：（注意yml配置方式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token punctuation">.</span>encrypt<span class="token punctuation">.</span>requestDecyptUriIgnoreList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">/</span>savespring<span class="token punctuation">.</span>encrypt<span class="token punctuation">.</span>responseEncryptUriIgnoreList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">/</span>encryptEntityspring<span class="token punctuation">.</span>encrypt<span class="token punctuation">.</span>responseEncryptUriIgnoreList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">/</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法②：在具体方法上加：@DecryptIgnore和@EncryptIgnore，即可生效</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试2"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"willivie 2019-12-29：新增接口&lt;br />"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DecryptIgnore</span>    <span class="token annotation punctuation">@EncryptIgnore</span>    <span class="token keyword">public</span> <span class="token class-name">ApiResponses</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PopTmpPARM</span><span class="token punctuation">></span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span>           <span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">PopTmpPARM<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">PopTmpPARM</span> popTmpPARM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        popTmpPARM<span class="token punctuation">.</span><span class="token function">setPopName</span><span class="token punctuation">(</span><span class="token string">"改变测试！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>popTmpPARM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>备注3</strong> </p><ul><li>加密忽略：responseEncryptUriIgnoreList 或者 @EncryptIgnore</li><li>解密忽略：requestDecyptUriIgnoreList 或者 @DecryptIgnore</li></ul><blockquote><p>参考项目：<a href="https://github.com/yinjihuan/monkey-api-encrypt">https://github.com/yinjihuan/monkey-api-encrypt</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加Live2D</title>
      <link href="2020/09/14/hexo-tian-jia-live2d/"/>
      <url>2020/09/14/hexo-tian-jia-live2d/</url>
      
        <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在hexo的配置文件<code>_config.yml</code>中添加如下配置，详细配置可以参考<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">文档</a>： </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku <span class="token comment"># 这里要对应下载的模型依赖</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span> <span class="token comment"># 这里修改模型的大小，位置(屏幕左边或者右边)</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3><p>模型名称可以到<a href="https://github.com/xiazeyu/live2d-widget-models">这里</a>参考，一些模型的预览可以在<a href="https://huaji8.top/post/live2d-plugin-2.0/">这里</a>。 </p><p>下载后把文件夹放到hexo/node_modules目录下，然后config.yml配置文件use使用对应的文件夹即可。</p><p><img src="https://static01.imgkr.com/temp/b813efee64ed474aa651f92b78d8d4ac.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github的几种加速下载方式</title>
      <link href="2020/09/13/github-de-9-chong-jia-su-xia-zai-fang-shi/"/>
      <url>2020/09/13/github-de-9-chong-jia-su-xia-zai-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-GitHub-镜像访问"><a href="#1-GitHub-镜像访问" class="headerlink" title="1. GitHub 镜像访问"></a>1. GitHub 镜像访问</h3><p>这里提供两个最常用的镜像地址：</p><ul><li><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org</a></li><li><a href="https://hub.fastgit.org/">https://hub.fastgit.org</a></li></ul><p>也就是说上面的镜像就是一个克隆版的 GitHub，你可以访问上面的镜像网站，网站的内容跟 GitHub 是完整同步的镜像，然后在这个网站里面进行下载克隆等操作。</p><span id="more"></span><h3 id="2-GitHub-文件加速"><a href="#2-GitHub-文件加速" class="headerlink" title="2. GitHub 文件加速"></a>2. GitHub 文件加速</h3><p>利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带CDN.</p><ul><li><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz</a></li><li><a href="https://g.ioiox.com/">https://g.ioiox.com</a></li></ul><p>以上网站为演示站点，如无法打开可以查看开源项目：gh-proxy-GitHub(<a href="https://hunsh.net/archives/23//">https://hunsh.net/archives/23/\</a>) 文件加速自行部署。</p><h3 id="3-Github-加速下载"><a href="#3-Github-加速下载" class="headerlink" title="3.Github 加速下载"></a>3.Github 加速下载</h3><p>只需要复制当前 GitHub 地址粘贴到输入框中就可以代理加速下载！</p><p>地址：<a href="http://toolwa.com/github/">http://toolwa.com/github/</a></p><h3 id="4-加速你的-Github"><a href="#4-加速你的-Github" class="headerlink" title="4. 加速你的 Github"></a>4. 加速你的 Github</h3><p><a href="https://github.zhlh6.cn/">https://github.zhlh6.cn</a></p><p>输入 Github 仓库地址，使用生成的地址进行 git ssh 等操作</p><h3 id="5-谷歌浏览器-GitHub-加速插件-推荐"><a href="#5-谷歌浏览器-GitHub-加速插件-推荐" class="headerlink" title="5. 谷歌浏览器 GitHub 加速插件(推荐)"></a>5. 谷歌浏览器 GitHub 加速插件(推荐)</h3><p><img src="https://s3.ax1x.com/2020/11/18/Dmj9Ve.png"></p><h3 id="6-GitHub-raw-加速"><a href="#6-GitHub-raw-加速" class="headerlink" title="6. GitHub raw 加速"></a>6. GitHub raw 加速</h3><p>GitHub raw 域名并非 github.com 而是 raw.githubusercontent.com，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。</p><p>将 raw.githubusercontent.com 替换为 raw.staticdn.net 即可加速。</p><h3 id="7-GitHub-Jsdelivr"><a href="#7-GitHub-Jsdelivr" class="headerlink" title="7. GitHub + Jsdelivr"></a>7. GitHub + Jsdelivr</h3><p>jsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。</p><p>也就是说如果 exe 文件是附加在 Release 处但是没有在 code 里面的话是无法获取的。所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途。</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="2020/09/13/git-ji-ben-cao-zuo/"/>
      <url>2020/09/13/git-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="一、全局设置配置用户名和邮箱"><a href="#一、全局设置配置用户名和邮箱" class="headerlink" title="一、全局设置配置用户名和邮箱"></a>一、全局设置配置用户名和邮箱</h3><p>首先安装好git bash后，任意位置打开git bash命令窗口</p><p>输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span> <span class="token comment"># 配置账号</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail@xx.com"</span> <span class="token comment"># 配置邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>这里顺带说一下config的作用域</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --local  <span class="token comment"># local只对某个仓库有效</span><span class="token function">git</span> config --global <span class="token comment"># global对所有仓库都有效</span><span class="token function">git</span> config --system <span class="token comment"># system对系统所有登录的用户有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示config的配置，加 –list</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list --global<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、生成ssh公钥"><a href="#二、生成ssh公钥" class="headerlink" title="二、生成ssh公钥"></a>二、生成ssh公钥</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里说明一下公钥的作用：公钥我们一般是给服务器的，在权限中加入我给的公钥，然后当我从远地仓库中下载项目的时候，服务器通过他的绑定的公钥来匹配我的私钥，这个时候,如果匹配,则就可以正常下载，如果不匹配，则失败。具体参照就是我们拉取GIthub上面的项目时，需要的操作。</p><h3 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h3><p>1、提交代码到暂存区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>  <span class="token comment"># （后面一个点代表提交所以修改文件到暂存区）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、提交内容的介绍</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'你的描述'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、拉取远程代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master <span class="token comment">#（这是下拉代码，将远程最新的代码与你本地最新的代码合并）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、推代码至远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin marter <span class="token comment"># (master为远程分支名)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、撤销本地修改（没有add之前，注意空格）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、撤销本地修改（add之后，注意空格）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、回退版本（commit之后，注意空格）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset –hard HEAD ^ <span class="token comment"># (^ 表示回到上一个版本)</span><span class="token function">git</span> reset –hard HEAD~100 <span class="token comment"># 回退到前100个版本</span><span class="token function">git</span> reset –hard 版本号  <span class="token comment"># 回退到指定版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8、查看版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、git 修改远程仓库</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin http://example.com/test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、查看配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8中的forEach()方法</title>
      <link href="2020/09/13/java8-zhong-de-foreach-fang-fa/"/>
      <url>2020/09/13/java8-zhong-de-foreach-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>下面介绍了两种集合的常用遍历方式。废话不多说，直接上代码</p><span id="more"></span><ul><li>HashMap的使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//普通遍历map的方法之一</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//用forEach()</span>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" or "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加上判断后</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Item : "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" Count : "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>List的使用</li></ul><pre class="line-numbers language-none"><code class="language-none">List&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();list.add(&quot;张三&quot;);list.add(&quot;李斯&quot;);list.add(&quot;王武&quot;);&#x2F;&#x2F;普通遍历的方式for(String name:list)&#123;    System.out.println(&quot;姓名：&quot;+name);&#125;&#x2F;&#x2F;用forEach的方式list.forEach(name-&gt;System.out.println(&quot;姓名：&quot;+name));&#x2F;&#x2F;参考list.forEach(System.out::println);&#x2F;&#x2F;filter和forEachlist.stream()    .filter(name-&gt;name.contains(&quot;张三&quot;)    .forEach(System.out::println);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用命令</title>
      <link href="2020/09/13/mysql-chang-yong-ming-ling/"/>
      <url>2020/09/13/mysql-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="一、常用语句"><a href="#一、常用语句" class="headerlink" title="一、常用语句"></a>一、常用语句</h3><p>1、查看mysql版本号</p><p> <code>select version();</code> </p><p>2、查看当前登录的用户</p><p> <code>select user();</code> </p><p>3、查看当前数据库</p><p> <code>select database();</code> </p><span id="more"></span><p>4、查看当前时间，返回年月日时分秒</p><p> <code>select now();</code> </p><p>5、查看日期的时间戳</p><p> <code>select unix_timestamp(&#39;2019-7-20&#39;);</code></p><p>6、显示数据表的结构</p><p><code>describe 表名; </code></p><p>7、查看表的创建细节</p><p><code>show create table 表名; </code></p><p>8、运行如下语句查看卡死的线程，有个时间字段可以看出卡住了多长时间  </p><p><code>select * from information_schema.innodb_trx;</code></p><p>9、运行如下语句可杀死线程，全部杀死后，数据库恢复正常   </p><p><code>kill trx_mysql_thread_id</code></p><p>10、查询连接池连接数  </p><p><code>show full processlist</code></p><p>11、查看最大连接数</p><p><code>show variables like &#39;%max_connections%&#39;;</code></p><p>12、修改最大连接数(mysql重启后会失效)  </p><p><code>set GLOBAL max_connections = 8800;</code></p><h3 id="二、常用操作，增删改查"><a href="#二、常用操作，增删改查" class="headerlink" title="二、常用操作，增删改查"></a>二、常用操作，增删改查</h3><p>1、查询表</p><pre class="line-numbers language-none"><code class="language-none">查询所有列select * from stu;查询指定列select sid,sname,age from stu;表别名select * from product as p;列别名select pname as pn from product;用来去除重复数据，是对整个结果集进行数据重复抑制的，而不是针对某一列。select distinct Department,SubCompany from Employee;字段间计算select age*salary,name from employee;运算查询select pname,price+10 from product;comm列有很多记录的值为NULL，因为任何东西与NULL相加结果还是NULL，所以结算结果可能会出现NULL。下面使用了把NULL转换成数值0的函数IFNULL select *,sal+ifnull(comm,0) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、修改表</p><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add 列名 类型（长度） [约束]; --添加列alter table 表名 modify 列名 类型（长度） [约束]; --修改列的类型长度及约束alter table 表名 change 旧列名 新列名 类型（长度） [约束]; --修改表列名alter table 表名 drop 列名; --删除列alter table 表名 character set 字符集; --修改表的字符集rename table 表名 to 新表名; --修改表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、新增数据 (列名与列值的类型，个数，顺序要一一对应。 )</p><pre class="line-numbers language-none"><code class="language-none">insert into 表(列名1，列名2，列名3..) values(值1，值2，值3..);--向表中插入某些列insert into 表 values(值1，值2，值3..); --向表中插入所有列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、修改数据</p><pre class="line-numbers language-none"><code class="language-none">update 表名 set 字段名&#x3D;值,字段名&#x3D;值...; --这个会修改所有的数据，把一列的值都变了update 表名 set 字段名&#x3D;值,字段名&#x3D;值... where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、删除数据</p><pre class="line-numbers language-none"><code class="language-none">delete from 表名  --删除表中所有记录delete from 表名 where 条件truncate table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="2020/09/13/hexo-shi-xian-wu-fen-zhong-da-jian-bo-ke/"/>
      <url>2020/09/13/hexo-shi-xian-wu-fen-zhong-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，<br>在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="具体实现步骤："><a href="#具体实现步骤：" class="headerlink" title="具体实现步骤："></a>具体实现步骤：</h4><ol><li>安装Git bash</li><li>安装Node.js</li><li>安装Hexo</li><li>在Github创建个人仓库</li><li>将博客部署到Github</li><li>发布文章<span id="more"></span></li></ol><p>关于一二步不多做赘述，百度的教程一大堆，下载后安装即可。</p><h3 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h3><p>安装好Node.js后，打开命令行窗口，执行以下命令安装hexo：</p><p><code>npm install hexo-cli -g</code></p><p>安装后可用hexo -v查看版本</p><p>接下来创建自己的博客目录（在任意位置创建一个myblog文件夹即可）</p><p>在myblog文件夹打开命令行窗口，并输出命令：</p><p>首先初始化博客<br><code>hexo init</code></p><p>接下来安装依赖<br><code>npm install</code></p><p>执行完毕后，myblog目录下后出现以下文件：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li></ul><p>安装完后即可用<code>hexo s</code>在本地启动，然后访问<code>localhost:4000</code>查看你的博客了</p><p><img src="https://d33wubrfki0l68.cloudfront.net/5997a40576f3beca7bbbd86fe79a795e9d520d8e/87f88/themes/screenshots/landscape.png"></p><h3 id="三、Github创建个人仓库"><a href="#三、Github创建个人仓库" class="headerlink" title="三、Github创建个人仓库"></a>三、Github创建个人仓库</h3><p>首先得注册github，注册后创建仓库（详细图文可百度查找），找到new repository</p><p>创建一个和你用户名相同的仓库，后面加上github.io，例如：username.github.io ，只有这样，将来要部署到GitHub page的时候，才会被识别，其中username就是你注册GitHub的用户名。</p><h3 id="四、将hexo部署到github"><a href="#四、将hexo部署到github" class="headerlink" title="四、将hexo部署到github"></a>四、将hexo部署到github</h3><p>首先全局配置你的Git用户名和邮箱，详情可看教程：<a href="https://emlwwl.github.io/2020/05/05/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">Git基本操作</a></p><p>配置后将生成的ssh密钥添加到github</p><p>查看ssh是否配置成功：<br><code>ssh -T git@github.com</code></p><p>然后就可以开始部署到Github，在myblog目录下打开命令行窗口，顺序执行下列命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save  <span class="token comment">#安装自动部署发布工具</span>hexo clean  <span class="token comment">#清除缓存</span>hexo generate  <span class="token comment">#保存修改，生成文件</span>hexo deploy  <span class="token comment">#发布到远程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后即可访问username.github.io看到你的博客啦！</p><h3 id="五、发布文章"><a href="#五、发布文章" class="headerlink" title="五、发布文章"></a>五、发布文章</h3><p>部署成功后就可以开始写博文了，文章是.md格式，文件目录默认创建在/myblog/source/_posts下</p><p>新建文章命令：<br><code>hexo new &#39;xxx文件名&#39;</code></p><p>执行后可在本地运行查看效果<br><code>hexo g &amp;&amp; hexo s</code></p><p>最后推荐一个快速简洁好用的markdown编辑器→Typroa，百度搜索下载即可</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
